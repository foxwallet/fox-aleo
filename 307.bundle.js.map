{"version":3,"file":"307.bundle.js","mappings":"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","sources":["webpack://aleo-website/./src/workers/worker.js"],"sourcesContent":["import * as aleo from \"@aleohq/sdk\";\n\nawait aleo.initializeWasm();\nawait aleo.initThreadPool(10);\n\nconst defaultHost = \"https://api.explorer.aleo.org/v1\";\nconst keyProvider = new aleo.AleoKeyProvider();\nconst programManager = new aleo.ProgramManager(defaultHost, keyProvider, undefined);\n\nkeyProvider.useCache(true);\n\nself.postMessage({\n    type: \"ALEO_WORKER_READY\",\n});\n\nlet lastLocalProgram = null;\nself.addEventListener(\"message\", (ev) => {\n    if (ev.data.type === \"ALEO_EXECUTE_PROGRAM_LOCAL\") {\n        const { localProgram, aleoFunction, inputs, privateKey } = ev.data;\n\n        console.log(\"Web worker: Executing function locally...\");\n        let startTime = performance.now();\n\n        (async function () {\n            try {\n                // Ensure the program is valid and that it contains the function specified\n                const program = programManager.createProgramFromSource(localProgram);\n                const program_id = program.id();\n                if (!program.hasFunction(aleoFunction)) {\n                    throw `Program ${program_id} does not contain function ${aleoFunction}`;\n                }\n                const cacheKey = `${program_id}:${aleoFunction}`;\n\n                // Get the program imports\n                const imports = programManager.networkClient.getProgramImports(localProgram);\n\n                // Get the proving and verifying keys for the function\n                if (lastLocalProgram !== localProgram) {\n                    const keys = programManager.executionEngine.synthesizeKeypair(localProgram, aleoFunction);\n                    programManager.keyProvider.cacheKeys(cacheKey, [keys.provingKey(), keys.verifyingKey()]);\n                    lastLocalProgram = localProgram;\n                }\n\n                // Pass the cache key to the execute function\n                const keyParams = new aleo.AleoKeyProviderParams({\"cacheKey\": cacheKey});\n\n                // Execute the function locally\n                let response = await programManager.executeOffline(\n                    localProgram,\n                    aleoFunction,\n                    inputs,\n                    false,\n                    imports,\n                    keyParams,\n                    undefined,\n                    undefined,\n                    aleo.PrivateKey.from_string(privateKey)\n                );\n\n                // Return the outputs to the main thread\n                console.log(`Web worker: Local execution completed in ${performance.now() - startTime} ms`);\n                const outputs = response.getOutputs();\n                let execution = response.getExecution();\n                if (execution) {\n                    aleo.verifyFunctionExecution(execution, keyProvider.getKeys(cacheKey)[1], program, \"hello\");\n                    execution = execution.toString();\n                    console.log(\"Execution verified successfully: \" + execution);\n                } else {\n                    execution = \"\";\n                }\n\n                console.log(`Function execution response: ${outputs}`);\n                self.postMessage({\n                    type: \"OFFLINE_EXECUTION_COMPLETED\",\n                    outputs: {outputs: outputs, execution: execution}\n                });\n            } catch (error) {\n                console.error(error);\n                self.postMessage({\n                    type: \"ERROR\",\n                    errorMessage: error.toString(),\n                });\n            }\n        })();\n    } else if (ev.data.type === \"ALEO_EXECUTE_PROGRAM_ON_CHAIN\") {\n        const {\n            remoteProgram,\n            aleoFunction,\n            inputs,\n            privateKey,\n            fee,\n            privateFee,\n            feeRecord,\n            url,\n        } = ev.data;\n\n        console.log(\"Web worker: Creating execution...\");\n        let startTime = performance.now();\n\n        (async function () {\n            try {\n                const privateKeyObject = aleo.PrivateKey.from_string(privateKey)\n                // Ensure the program is valid and that it contains the function specified\n                const program = await programManager.networkClient.getProgramObject(remoteProgram);\n                const program_id = program.id();\n                if (!program.hasFunction(aleoFunction)) {\n                    throw `Program ${program_id} does not contain function ${aleoFunction}`;\n                }\n\n                // Get the proving and verifying keys for the function\n                const cacheKey = `${program_id}:${aleoFunction}`;\n                if (!programManager.keyProvider.containsKeys(cacheKey)) {\n                    console.log(`Web worker: Synthesizing proving & verifying keys for: '${program_id}:${aleoFunction}'`);\n                    const keys = programManager.executionEngine.synthesizeKeypair(remoteProgram, aleoFunction);\n                    programManager.keyProvider.cacheKeys(cacheKey, [keys.provingKey(), keys.verifyingKey()]);\n                }\n\n                // Pass the cache key to the execute function\n                const keyParams = new aleo.AleoKeyProviderParams({\"cacheKey\": cacheKey})\n\n                // Set the host to the provided URL if provided\n                if (typeof url === \"string\") { programManager.setHost(url); }\n                const transaction = await programManager.execute(\n                    program_id,\n                    aleoFunction,\n                    fee,\n                    privateFee,\n                    inputs,\n                    undefined,\n                    keyParams,\n                    feeRecord,\n                    undefined,\n                    undefined,\n                    privateKeyObject\n                );\n\n                // Return the transaction id to the main thread\n                console.log(`Web worker: On-chain execution transaction created in ${performance.now() - startTime} ms`);\n                self.postMessage({\n                    type: \"EXECUTION_TRANSACTION_COMPLETED\",\n                    executeTransaction: transaction,\n                });\n            } catch (error) {\n                console.error(`Error creating execution transaction: ${error}`);\n                self.postMessage({\n                    type: \"ERROR\",\n                    errorMessage: error.toString(),\n                });\n            } finally {\n                programManager.setHost(defaultHost);\n            }\n        })();\n    } else if (ev.data.type === \"ALEO_ESTIMATE_EXECUTION_FEE\") {\n        const { remoteProgram, aleoFunction, inputs, url } =\n            ev.data;\n\n        console.log(\"Web worker: Estimating execution fee...\");\n        let startTime = performance.now();\n\n        (async function () {\n            try {\n                // Ensure the program is valid and that it contains the function specified\n                const program = await programManager.networkClient.getProgramObject(remoteProgram);\n                const program_id = program.id();\n                if (!program.getFunctions().includes(aleoFunction)) {\n                    throw `Program ${program_id} does not contain function ${aleoFunction}`;\n                }\n                const cacheKey = `${program_id}:${aleoFunction}`;\n                const imports = await programManager.networkClient.getProgramImports(remoteProgram);\n\n                // Get the proving and verifying keys for the function\n                if (!programManager.keyProvider.containsKeys(cacheKey)) {\n                    console.log(`Web worker: Synthesizing proving & verifying keys for: '${program_id}:${aleoFunction}'`);\n                    const keys = programManager.executionEngine.synthesizeKeypair(remoteProgram, aleoFunction);\n                    programManager.keyProvider.cacheKeys(cacheKey, [keys.provingKey(), keys.verifyingKey()]);\n                }\n\n                // Estimate the execution fee\n                const [provingKey, verifyingKey] = programManager.keyProvider.getKeys(cacheKey);\n                let executeFee = await programManager.executionEngine.estimateExecutionFee(\n                    new aleo.PrivateKey(),\n                    remoteProgram,\n                    aleoFunction,\n                    inputs,\n                    url,\n                    false,\n                    imports,\n                    provingKey,\n                    verifyingKey,\n                );\n\n                // Return the execution fee estimate to the main thread\n                console.log(`Web worker: Execution fee estimated in ${performance.now() - startTime} ms`);\n                console.log(`Execution Fee Estimation: ${executeFee} microcrdits`);\n                self.postMessage({\n                    type: \"EXECUTION_FEE_ESTIMATION_COMPLETED\",\n                    executionFee: Number(executeFee) / 1000000 + 0.01,\n                });\n            } catch (error) {\n                console.error(error);\n                self.postMessage({\n                    type: \"ERROR\",\n                    errorMessage: error.toString(),\n                });\n            }\n        })();\n    } else if (ev.data.type === \"ALEO_ESTIMATE_DEPLOYMENT_FEE\") {\n        const { program, url } = ev.data;\n\n        console.log(\"Web worker: Estimating deployment fee...\");\n\n        let startTime = performance.now();\n        (async function () {\n            try {\n                const imports = await programManager.networkClient.getProgramImports(program);\n                console.log(\"Estimating deployment fee..\");\n                let deploymentFee =\n                    await programManager.executionEngine.estimateDeploymentFee(\n                        program,\n                        false,\n                        imports,\n                    );\n\n                // Return the deployment fee estimate to the main thread\n                console.log(`Web worker: Deployment fee estimation completed in ${performance.now() - startTime} ms`);\n                console.log(`Deployment Fee Estimation: ${deploymentFee} microcredits`);\n                self.postMessage({\n                    type: \"DEPLOYMENT_FEE_ESTIMATION_COMPLETED\",\n                    deploymentFee: Number(deploymentFee) / 1000000 + 0.01,\n                });\n            } catch (error) {\n                console.error(error);\n                self.postMessage({\n                    type: \"ERROR\",\n                    errorMessage: error.toString(),\n                });\n            }\n        })();\n    } else if (ev.data.type === \"ALEO_TRANSFER\") {\n        const {\n            privateKey,\n            amountCredits,\n            recipient,\n            transfer_type,\n            amountRecord,\n            fee,\n            privateFee,\n            feeRecord,\n            url,\n        } = ev.data;\n\n        console.log(\n            `Web worker: Creating transfer of type ${transfer_type}...`,\n        );\n        let startTime = performance.now();\n\n        (async function () {\n            try {\n                // Set the host to the provided URL if provided\n                if (typeof url === \"string\") { programManager.setHost(url); }\n\n                // Create the transfer transaction and submit it to the network\n                const transaction = await programManager.transfer(\n                    amountCredits,\n                    recipient,\n                    transfer_type,\n                    fee,\n                    privateFee,\n                    undefined,\n                    amountRecord,\n                    feeRecord,\n                    aleo.PrivateKey.from_string(privateKey)\n                );\n\n                // Return the transaction id to the main thread\n                console.log(`Web worker: Transfer transaction ${transaction} created in ${performance.now() - startTime} ms`);\n                self.postMessage({\n                    type: \"TRANSFER_TRANSACTION_COMPLETED\",\n                    transferTransaction: transaction,\n                });\n            } catch (error) {\n                console.error(error);\n                self.postMessage({\n                    type: \"ERROR\",\n                    errorMessage: error.toString(),\n                });\n            } finally {\n                programManager.setHost(defaultHost);\n            }\n        })();\n    } else if (ev.data.type === \"ALEO_DEPLOY\") {\n        const { program, privateKey, fee, privateFee, feeRecord, url } = ev.data;\n\n        console.log(\"Web worker: Creating deployment...\");\n\n        let startTime = performance.now();\n        (async function () {\n            try {\n                // Set the network client host if specified\n                if (typeof url === \"string\") { programManager.setHost(url); }\n\n                // Check if the program is valid\n                const programObject = programManager.createProgramFromSource(program);\n\n                // Check if the program already exists on the network. If so, throw an error\n                let programExists = false;\n                try {\n                    await programManager.networkClient.getProgram(programObject.id());\n                    programExists = true;\n                } catch (e) {\n                    console.log(\n                        `Program not found on the Aleo Network - proceeding with deployment...`,\n                    );\n                }\n\n                if (programExists) {\n                    throw `Program ${programObject.id()} already exists on the network`;\n                }\n\n                console.log(\"fee is: \", fee);\n                // Create the deployment transaction and submit it to the network\n                let transaction = await programManager.deploy(\n                    program,\n                    fee,\n                    privateFee,\n                    undefined,\n                    feeRecord,\n                    aleo.PrivateKey.from_string(privateKey),\n                )\n\n                // Return the transaction id to the main thread\n                console.log(`Web worker: Deployment transaction ${transaction} created in ${performance.now() - startTime} ms`);\n                self.postMessage({\n                    type: \"DEPLOY_TRANSACTION_COMPLETED\",\n                    deployTransaction: transaction,\n                });\n            } catch (error) {\n                console.log(error);\n                self.postMessage({\n                    type: \"ERROR\",\n                    errorMessage: error.toString(),\n                });\n            } finally {\n                programManager.setHost(defaultHost);\n            }\n        })();\n    } else if (ev.data.type === \"ALEO_SPLIT\") {\n        const { splitAmount, record, privateKey, url } = ev.data;\n\n        console.log(\"Web worker: Creating split...\");\n\n        let startTime = performance.now();\n        (async function () {\n            try {\n                // Set the network client host if specified\n                if (typeof url === \"string\") { programManager.setHost(url); }\n\n                // Create the split transaction and submit to the network\n                const transaction = await programManager.split(\n                    splitAmount,\n                    record,\n                    aleo.PrivateKey.from_string(privateKey)\n                );\n\n                // Return the transaction id to the main thread\n                console.log(`Web worker: Split transaction ${transaction} created in ${performance.now() - startTime} ms`);\n                self.postMessage({\n                    type: \"SPLIT_TRANSACTION_COMPLETED\",\n                    splitTransaction: transaction,\n                });\n            } catch (error) {\n                console.log(error);\n                self.postMessage({\n                    type: \"ERROR\",\n                    errorMessage: error.toString(),\n                });\n            } finally {\n                programManager.setHost(defaultHost);\n            }\n        })();\n    } else if (ev.data.type === \"ALEO_JOIN\") {\n        const { recordOne, recordTwo, fee, privateFee, feeRecord, privateKey, url } =\n            ev.data;\n\n        console.log(\"Web worker: Creating join...\");\n\n        let startTime = performance.now();\n        (async function () {\n\n            try {\n                // Set the network client host if specified\n                if (typeof url === \"string\") { programManager.setHost(url); }\n\n                // Create the join transaction and submit it to the network\n                const transaction = await programManager.join(\n                    recordOne,\n                    recordTwo,\n                    fee,\n                    privateFee,\n                    undefined,\n                    feeRecord,\n                    aleo.PrivateKey.from_string(privateKey),\n                );\n\n                // Return the transaction id to the main thread\n                console.log(`Web worker: Join transaction ${transaction} created in ${performance.now() - startTime} ms`);\n                self.postMessage({\n                    type: \"JOIN_TRANSACTION_COMPLETED\",\n                    joinTransaction: transaction,\n                });\n            } catch (error) {\n                console.log(error);\n                self.postMessage({\n                    type: \"ERROR\",\n                    errorMessage: error.toString(),\n                });\n            } finally {\n                programManager.setHost(defaultHost);\n            }\n        })();\n    }\n});\n"],"names":["_regeneratorRuntime","e","t","r","Object","prototype","n","hasOwnProperty","o","defineProperty","value","i","Symbol","a","iterator","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","call","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","_typeof","resolve","__await","then","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","length","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","delegateYield","asyncGeneratorStep","gen","reject","_next","_throw","key","info","error","_asyncToGenerator","fn","self","args","arguments","apply","err","undefined","aleo","defaultHost","keyProvider","programManager","useCache","postMessage","lastLocalProgram","addEventListener","ev","data","_ev$data","localProgram","aleoFunction","inputs","privateKey","console","log","startTime","performance","now","_callee","program","program_id","cacheKey","imports","keyParams","response","outputs","execution","_context","createProgramFromSource","id","hasFunction","concat","networkClient","getProgramImports","executionEngine","synthesizeKeypair","cacheKeys","provingKey","verifyingKey","executeOffline","from_string","getOutputs","getExecution","getKeys","toString","t0","errorMessage","_ev$data2","remoteProgram","fee","privateFee","feeRecord","url","_callee2","privateKeyObject","transaction","_context2","getProgramObject","containsKeys","setHost","execute","executeTransaction","_ev$data3","_callee3","_programManager$keyPr","_programManager$keyPr2","executeFee","_context3","getFunctions","includes","estimateExecutionFee","executionFee","Number","_ev$data4","_callee4","deploymentFee","_context4","estimateDeploymentFee","_ev$data5","amountCredits","recipient","transfer_type","amountRecord","_callee5","_context5","transfer","transferTransaction","_ev$data6","_callee6","programObject","programExists","_context6","getProgram","deploy","deployTransaction","t1","_ev$data7","splitAmount","record","_callee7","_context7","split","splitTransaction","_ev$data8","recordOne","recordTwo","_callee8","_context8","join","joinTransaction"],"sourceRoot":""}