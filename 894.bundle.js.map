{"version":3,"file":"894.bundle.js","mappings":"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","sources":["webpack://aleo-website/./node_modules/@aleohq/wasm/snippets/wasm-bindgen-rayon-7afa899f36665473/src/workerHelpers.js","webpack://aleo-website/../src/account.ts","webpack://aleo-website/../src/network-client.ts","webpack://aleo-website/../src/function-key-provider.ts","webpack://aleo-website/../src/record-provider.ts","webpack://aleo-website/../src/program-manager.ts","webpack://aleo-website/../src/managed-worker.ts","webpack://aleo-website/../src/browser.ts","webpack://aleo-website/../src/index.ts","webpack://aleo-website/./node_modules/comlink/dist/esm/comlink.mjs"],"sourcesContent":["/**\n * Copyright 2021 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *     http://www.apache.org/licenses/LICENSE-2.0\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// Note: we use `wasm_bindgen_worker_`-prefixed message types to make sure\n// we can handle bundling into other files, which might happen to have their\n// own `postMessage`/`onmessage` communication channels.\n//\n// If we didn't take that into the account, we could send much simpler signals\n// like just `0` or whatever, but the code would be less resilient.\n\nfunction waitForMsgType(target, type) {\n  return new Promise(resolve => {\n    target.addEventListener('message', function onMsg({ data }) {\n      if (data == null || data.type !== type) return;\n      target.removeEventListener('message', onMsg);\n      resolve(data);\n    });\n  });\n}\n\nwaitForMsgType(self, 'wasm_bindgen_worker_init').then(async data => {\n  // # Note 1\n  // Our JS should have been generated in\n  // `[out-dir]/snippets/wasm-bindgen-rayon-[hash]/workerHelpers.js`,\n  // resolve the main module via `../../..`.\n  //\n  // This might need updating if the generated structure changes on wasm-bindgen\n  // side ever in the future, but works well with bundlers today. The whole\n  // point of this crate, after all, is to abstract away unstable features\n  // and temporary bugs so that you don't need to deal with them in your code.\n  //\n  // # Note 2\n  // This could be a regular import, but then some bundlers complain about\n  // circular deps.\n  //\n  // Dynamic import could be cheap if this file was inlined into the parent,\n  // which would require us just using `../../..` in `new Worker` below,\n  // but that doesn't work because wasm-pack unconditionally adds\n  // \"sideEffects\":false (see below).\n  //\n  // OTOH, even though it can't be inlined, it should be still reasonably\n  // cheap since the requested file is already in cache (it was loaded by\n  // the main thread).\n  const pkg = await import('../../..');\n  await pkg.default(data.module, data.memory);\n  postMessage({ type: 'wasm_bindgen_worker_ready' });\n  pkg.wbg_rayon_start_worker(data.receiver);\n});\n\n// Note: this is never used, but necessary to prevent a bug in Firefox\n// (https://bugzilla.mozilla.org/show_bug.cgi?id=1702191) where it collects\n// Web Workers that have a shared WebAssembly memory with the main thread,\n// but are not explicitly rooted via a `Worker` instance.\n//\n// By storing them in a variable, we can keep `Worker` objects around and\n// prevent them from getting GC-d.\nlet _workers;\n\nexport async function startWorkers(module, memory, builder) {\n  const workerInit = {\n    type: 'wasm_bindgen_worker_init',\n    module,\n    memory,\n    receiver: builder.receiver()\n  };\n\n  _workers = await Promise.all(\n    Array.from({ length: builder.numThreads() }, async () => {\n      // Self-spawn into a new Worker.\n      //\n      // TODO: while `new URL('...', import.meta.url) becomes a semi-standard\n      // way to get asset URLs relative to the module across various bundlers\n      // and browser, ideally we should switch to `import.meta.resolve`\n      // once it becomes a standard.\n      //\n      // Note: we could use `../../..` as the URL here to inline workerHelpers.js\n      // into the parent entry instead of creating another split point -\n      // this would be preferable from optimization perspective -\n      // however, Webpack then eliminates all message handler code\n      // because wasm-pack produces \"sideEffects\":false in package.json\n      // unconditionally.\n      //\n      // The only way to work around that is to have side effect code\n      // in an entry point such as Worker file itself.\n      const worker = new Worker(new URL('./workerHelpers.js', import.meta.url), {\n        type: 'module'\n      });\n      worker.postMessage(workerInit);\n      await waitForMsgType(worker, 'wasm_bindgen_worker_ready');\n      return worker;\n    })\n  );\n  builder.build();\n}\n","import {\n  Address,\n  PrivateKey,\n  Signature,\n  ViewKey,\n  PrivateKeyCiphertext,\n  RecordCiphertext,\n} from \".\";\n\ninterface AccountParam {\n  privateKey?: string;\n  seed?: Uint8Array;\n}\n\n/**\n * Key Management class. Enables the creation of a new Aleo Account, importation of an existing account from\n * an existing private key or seed, and message signing and verification functionality.\n *\n * An Aleo Account is generated from a randomly generated seed (number) from which an account private key, view key,\n * and a public account address are derived. The private key lies at the root of an Aleo account. It is a highly\n * sensitive secret and should be protected as it allows for creation of Aleo Program executions and arbitrary value\n * transfers. The View Key allows for decryption of a user's activity on the blockchain. The Address is the public\n * address to which other users of Aleo can send Aleo credits and other records to. This class should only be used\n * environments where the safety of the underlying key material can be assured.\n *\n * @example\n * // Create a new account\n * const myRandomAccount = new Account();\n *\n * // Create an account from a randomly generated seed\n * const seed = new Uint8Array([94, 91, 52, 251, 240, 230, 226, 35, 117, 253, 224, 210, 175, 13, 205, 120, 155, 214, 7, 169, 66, 62, 206, 50, 188, 40, 29, 122, 40, 250, 54, 18]);\n * const mySeededAccount = new Account({seed: seed});\n *\n * // Create an account from an existing private key\n * const myExistingAccount = new Account({privateKey: 'myExistingPrivateKey'})\n *\n * // Sign a message\n * const hello_world = Uint8Array.from([104, 101, 108, 108, 111 119, 111, 114, 108, 100])\n * const signature = myRandomAccount.sign(hello_world)\n *\n * // Verify a signature\n * myRandomAccount.verify(hello_world, signature)\n */\nexport class Account {\n  _privateKey: PrivateKey;\n  _viewKey: ViewKey;\n  _address: Address;\n\n  constructor(params: AccountParam = {}) {\n    try {\n      this._privateKey = this.privateKeyFromParams(params);\n    } catch (e) {\n      console.error(\"Wrong parameter\", e);\n      throw new Error(\"Wrong Parameter\");\n    }\n    this._viewKey = ViewKey.from_private_key(this._privateKey);\n    this._address = Address.from_private_key(this._privateKey);\n  }\n\n  /**\n   * Attempts to create an account from a private key ciphertext\n   * @param {PrivateKeyCiphertext | string} ciphertext\n   * @param {string} password\n   * @returns {PrivateKey | Error}\n   *\n   * @example\n   * const ciphertext = PrivateKey.newEncrypted(\"password\");\n   * const account = Account.fromCiphertext(ciphertext, \"password\");\n   */\n  public static fromCiphertext(ciphertext: PrivateKeyCiphertext | string, password: string) {\n    try {\n      ciphertext = (typeof ciphertext === \"string\") ? PrivateKeyCiphertext.fromString(ciphertext) : ciphertext;\n      const _privateKey = PrivateKey.fromPrivateKeyCiphertext(ciphertext, password);\n      return new Account({ privateKey: _privateKey.to_string() });\n    } catch(e) {\n      throw new Error(\"Wrong password or invalid ciphertext\");\n    }\n  }\n\n  private privateKeyFromParams(params: AccountParam) {\n    if (params.seed) {\n      return PrivateKey.from_seed_unchecked(params.seed);\n    }\n    if (params.privateKey) {\n      return PrivateKey.from_string(params.privateKey);\n    }\n    return new PrivateKey();\n  }\n\n  privateKey() {\n    return this._privateKey;\n  }\n\n  viewKey() {\n    return this._viewKey;\n  }\n\n  address() {\n    return this._address;\n  }\n\n  toString() {\n    return this.address().to_string()\n  }\n\n  /**\n   * Encrypt the account's private key with a password\n   * @param {string} ciphertext\n   * @returns {PrivateKeyCiphertext}\n   *\n   * @example\n   * const account = new Account();\n   * const ciphertext = account.encryptAccount(\"password\");\n   */\n  encryptAccount(password: string) {\n    return this._privateKey.toCiphertext(password);\n  }\n\n  /**\n   * Decrypts a Record in ciphertext form into plaintext\n   * @param {string} ciphertext\n   * @returns {Record}\n   *\n   * @example\n   * const account = new Account();\n   * const record = account.decryptRecord(\"record1ciphertext\");\n   */\n  decryptRecord(ciphertext: string) {\n    return this._viewKey.decrypt(ciphertext);\n  }\n\n  /**\n   * Decrypts an array of Records in ciphertext form into plaintext\n   * @param {string[]} ciphertexts\n   * @returns {Record[]}\n   *\n   * @example\n   * const account = new Account();\n   * const record = account.decryptRecords([\"record1ciphertext\", \"record2ciphertext\"]);\n   */\n  decryptRecords(ciphertexts: string[]) {\n    return ciphertexts.map((ciphertext) => this._viewKey.decrypt(ciphertext));\n  }\n\n  /**\n   * Determines whether the account owns a ciphertext record\n   * @param {RecordCipherText | string} ciphertext\n   * @returns {boolean}\n   *\n   * @example\n   * // Create a connection to the Aleo network and an account\n   * const connection = new NodeConnection(\"vm.aleo.org/api\");\n   * const account = Account.fromCiphertext(\"ciphertext\", \"password\");\n   *\n   * // Get a record from the network\n   * const record = connection.getBlock(1234);\n   * const recordCipherText = record.transactions[0].execution.transitions[0].id;\n   *\n   * // Check if the account owns the record\n   * if account.ownsRecord(recordCipherText) {\n   *     // Then one can do something like:\n   *     // Decrypt the record and check if it's spent\n   *     // Store the record in a local database\n   *     // Etc.\n   * }\n   */\n  ownsRecordCiphertext(ciphertext: RecordCiphertext | string) {\n    if (typeof ciphertext === 'string') {\n      try {\n        const ciphertextObject = RecordCiphertext.fromString(ciphertext);\n        return ciphertextObject.isOwner(this._viewKey);\n      }\n      catch (e) {\n        return false;\n      }\n    }\n    else {\n      return ciphertext.isOwner(this._viewKey);\n    }\n  }\n\n  /**\n   * Signs a message with the account's private key.\n   * Returns a Signature.\n   *\n   * @param {Uint8Array} message\n   * @returns {Signature}\n   *\n   * @example\n   * const account = new Account();\n   * const message = Uint8Array.from([104, 101, 108, 108, 111 119, 111, 114, 108, 100])\n   * account.sign(message);\n   */\n  sign(message: Uint8Array) {\n    return this._privateKey.sign(message);\n  }\n\n  /**\n   * Verifies the Signature on a message.\n   *\n   * @param {Uint8Array} message\n   * @param {Signature} signature\n   * @returns {boolean}\n   *\n   * @example\n   * const account = new Account();\n   * const message = Uint8Array.from([104, 101, 108, 108, 111 119, 111, 114, 108, 100])\n   * const signature = account.sign(message);\n   * account.verify(message, signature);\n   */\n  verify(message: Uint8Array, signature: Signature) {\n    return this._address.verify(message, signature);\n  }\n\n}\n","import axios, {AxiosError} from \"axios\";\nimport {\n  Account,\n  Block,\n  RecordCiphertext,\n  Program,\n  RecordPlaintext,\n  PrivateKey,\n  WasmTransaction,\n  Transaction,\n  Transition,\n  logAndThrow\n} from \".\";\n\ntype ProgramImports = { [key: string]: string | Program };\n\n/**\n * Client library that encapsulates REST calls to publicly exposed endpoints of Aleo nodes. The methods provided in this\n * allow users to query public information from the Aleo blockchain and submit transactions to the network.\n *\n * @param {string} host\n * @example\n * // Connection to a local node\n * const localNetworkClient = new AleoNetworkClient(\"http://localhost:3030\");\n *\n * // Connection to a public beacon node\n * const publicnetworkClient = new AleoNetworkClient(\"https://vm.aleo.org/api\");\n */\nclass AleoNetworkClient {\n  host: string;\n  account: Account | undefined;\n\n  constructor(host: string) {\n    this.host = host + \"/testnet3\";\n  }\n\n  /**\n   * Set an account to use in networkClient calls\n   *\n   * @param {Account} account\n   * @example\n   * const account = new Account();\n   * networkClient.setAccount(account);\n   */\n  setAccount(account: Account) {\n    this.account = account;\n  }\n\n  /**\n   * Return the Aleo account used in the networkClient\n   *\n   * @example\n   * const account = networkClient.getAccount();\n   */\n  getAccount(): Account | undefined {\n    return this.account;\n  }\n\n  /**\n   * Set a new host for the networkClient\n   *\n   * @param {string} host The address of a node hosting the Aleo API\n   * @param host\n   */\n  setHost(host: string) {\n    this.host = host + \"/testnet3\";\n  }\n\n  async fetchData<Type>(\n      url = \"/\",\n  ): Promise<Type> {\n    try {\n      const response = await axios.get<Type>(this.host + url);\n      return response.data;\n    } catch (error) {\n      throw new Error(\"Error fetching data.\");\n    }\n  }\n\n  /**\n   * Attempts to find unspent records in the Aleo blockchain for a specified private key\n   * @param {number} startHeight - The height at which to start searching for unspent records\n   * @param {number} endHeight - The height at which to stop searching for unspent records\n   * @param {string | PrivateKey} privateKey - The private key to use to find unspent records\n   * @param {number[]} amounts - The amounts (in microcredits) to search for (eg. [100, 200, 3000])\n   * @param {number} maxMicrocredits - The maximum number of microcredits to search for\n   * @param {string[]} nonces - The nonces of already found records to exclude from the search\n   *\n   * @example\n   * // Find all unspent records\n   * const privateKey = \"[PRIVATE_KEY]\";\n   * const records = networkClient.findUnspentRecords(0, undefined, privateKey);\n   *\n   * // Find specific amounts\n   * const startHeight = 500000;\n   * const amounts = [600000, 1000000];\n   * const records = networkClient.findUnspentRecords(startHeight, undefined, privateKey, amounts);\n   *\n   * // Find specific amounts with a maximum number of cumulative microcredits\n   * const maxMicrocredits = 100000;\n   * const records = networkClient.findUnspentRecords(startHeight, undefined, privateKey, undefined, maxMicrocredits);\n   */\n  async findUnspentRecords(\n      startHeight: number,\n      endHeight: number | undefined,\n      privateKey: string | PrivateKey | undefined,\n      amounts: number[] | undefined,\n      maxMicrocredits?: number | undefined,\n      nonces?: string[] | undefined,\n  ): Promise<Array<RecordPlaintext> | Error> {\n    nonces = nonces || [];\n    // Ensure start height is not negative\n    if (startHeight < 0) {\n      throw new Error(\"Start height must be greater than or equal to 0\");\n    }\n\n    // Initialize search parameters\n    const records = new Array<RecordPlaintext>();\n    let start;\n    let end;\n    let resolvedPrivateKey: PrivateKey;\n    let failures = 0;\n    let totalRecordValue = BigInt(0);\n    let latestHeight: number;\n\n    // Ensure a private key is present to find owned records\n    if (typeof privateKey === \"undefined\") {\n      if (typeof this.account === \"undefined\") {\n        throw new Error(\"Private key must be specified in an argument to findOwnedRecords or set in the AleoNetworkClient\");\n      } else {\n        resolvedPrivateKey = this.account._privateKey;\n      }\n    } else {\n      try {\n        resolvedPrivateKey = privateKey instanceof PrivateKey ? privateKey : PrivateKey.from_string(privateKey);\n      } catch (error) {\n        throw new Error(\"Error parsing private key provided.\");\n      }\n    }\n    const viewKey = resolvedPrivateKey.to_view_key();\n\n    // Get the latest height to ensure the range being searched is valid\n    try {\n      const blockHeight = await this.getLatestHeight();\n      if (typeof blockHeight === \"number\") {\n        latestHeight = blockHeight;\n      } else {\n        throw new Error(\"Error fetching latest block height.\");\n      }\n    } catch (error) {\n      throw new Error(\"Error fetching latest block height.\");\n    }\n\n    // If no end height is specified or is greater than the latest height, set the end height to the latest height\n    if (typeof endHeight === \"number\" && endHeight <= latestHeight) {\n      end = endHeight\n    } else {\n      end = latestHeight;\n    }\n\n    // If the starting is greater than the ending height, return an error\n    if (startHeight > end) {\n      throw new Error(\"Start height must be less than or equal to end height.\");\n    }\n\n    // Iterate through blocks in reverse order in chunks of 50\n    while (end > startHeight) {\n      start = end - 50;\n      if (start < startHeight) {\n        start = startHeight;\n      }\n      try {\n        // Get 50 blocks (or the difference between the start and end if less than 50)\n        const blocks = await this.getBlockRange(start, end);\n        end = start;\n        if (!(blocks instanceof Error)) {\n          // Iterate through blocks to find unspent records\n          for (let i = 0; i < blocks.length; i++) {\n            const block = blocks[i];\n            const transactions = block.transactions;\n            if (!(typeof transactions === \"undefined\")) {\n              for (let j = 0; j < transactions.length; j++) {\n                const confirmedTransaction = transactions[j];\n                // Search for unspent records in execute transactions of credits.aleo\n                if (confirmedTransaction.type == \"execute\") {\n                  const transaction = confirmedTransaction.transaction;\n                  if (transaction.execution && !(typeof transaction.execution.transitions == \"undefined\")) {\n                    for (let k = 0; k < transaction.execution.transitions.length; k++) {\n                      const transition = transaction.execution.transitions[k];\n                      // Only search for unspent records in credits.aleo (for now)\n                      if (transition.program !== \"credits.aleo\") {\n                        continue;\n                      }\n                      if (!(typeof transition.outputs == \"undefined\")) {\n                        for (let l = 0; l < transition.outputs.length; l++) {\n                          const output = transition.outputs[l];\n                          if (output.type === \"record\") {\n                            try {\n                              // Create a wasm record ciphertext object from the found output\n                              const record = RecordCiphertext.fromString(output.value);\n                              // Determine if the record is owned by the specified view key\n                              if (record.isOwner(viewKey)) {\n                                // Decrypt the record and get the serial number\n                                const recordPlaintext = record.decrypt(viewKey);\n\n                                // If the record has already been found, skip it\n                                const nonce = recordPlaintext.nonce();\n                                if (nonces.includes(nonce)) {\n                                  continue;\n                                }\n\n                                // Otherwise record the nonce that has been found\n                                const serialNumber = recordPlaintext.serialNumberString(resolvedPrivateKey, \"credits.aleo\", \"credits\");\n                                // Attempt to see if the serial number is spent\n                                try {\n                                  await this.getTransitionId(serialNumber);\n                                } catch (error) {\n                                  // If it's not found, add it to the list of unspent records\n                                  if (!amounts) {\n                                    records.push(recordPlaintext);\n                                    // If the user specified a maximum number of microcredits, check if the search has found enough\n                                    if (typeof maxMicrocredits === \"number\") {\n                                      totalRecordValue += recordPlaintext.microcredits();\n                                      // Exit if the search has found the amount specified\n                                      if (totalRecordValue >= BigInt(maxMicrocredits)) {\n                                        return records;\n                                      }\n                                    }\n                                  }\n                                  // If the user specified a list of amounts, check if the search has found them\n                                  if (!(typeof amounts === \"undefined\") && amounts.length > 0) {\n                                    let amounts_found = 0;\n                                    if (recordPlaintext.microcredits() > amounts[amounts_found]) {\n                                        amounts_found += 1;\n                                        records.push(recordPlaintext);\n                                        // If the user specified a maximum number of microcredits, check if the search has found enough\n                                        if (typeof maxMicrocredits === \"number\") {\n                                          totalRecordValue += recordPlaintext.microcredits();\n                                          // Exit if the search has found the amount specified\n                                          if (totalRecordValue >= BigInt(maxMicrocredits)) {\n                                            return records;\n                                          }\n                                        }\n                                        if (records.length >= amounts.length) {\n                                          return records;\n                                        }\n                                    }\n                                  }\n                                }\n                              }\n                            } catch (error) {\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      } catch (error) {\n        // If there is an error fetching blocks, log it and keep searching\n        console.warn(\"Error fetching blocks in range: \" + start.toString() + \"-\" + end.toString());\n        console.warn(\"Error: \", error);\n        failures += 1;\n        if (failures > 10) {\n          console.warn(\"10 failures fetching records reached. Returning records fetched so far\");\n          return records;\n        }\n      }\n    }\n    return records;\n  }\n\n  /**\n   * Returns the contents of the block at the specified block height\n   *\n   * @param {number} height\n   * @example\n   * const block = networkClient.getBlock(1234);\n   */\n  async getBlock(height: number): Promise<Block | Error> {\n    try {\n      const block = await this.fetchData<Block>(\"/block/\" + height);\n      return block;\n    } catch (error) {\n      throw new Error(\"Error fetching block.\");\n    }\n  }\n\n  /**\n   * Returns a range of blocks between the specified block heights\n   *\n   * @param {number} start\n   * @param {number} end\n   * @example\n   * const blockRange = networkClient.getBlockRange(2050, 2100);\n   */\n  async getBlockRange(start: number, end: number): Promise<Array<Block> | Error> {\n    try {\n      return await this.fetchData<Array<Block>>(\"/blocks?start=\" + start + \"&end=\" + end);\n    } catch (error) {\n      const errorMessage = \"Error fetching blocks between \" + start + \" and \" + end + \".\"\n      throw new Error(errorMessage);\n    }\n  }\n\n  /**\n   * Returns the contents of the latest block\n   *\n   * @example\n   * const latestHeight = networkClient.getLatestBlock();\n   */\n  async getLatestBlock(): Promise<Block | Error> {\n    try {\n      return await this.fetchData<Block>(\"/latest/block\") as Block;\n    } catch (error) {\n      throw new Error(\"Error fetching latest block.\");\n    }\n  }\n\n  /**\n   * Returns the hash of the last published block\n   *\n   * @example\n   * const latestHash = networkClient.getLatestHash();\n   */\n  async getLatestHash(): Promise<string | Error> {\n    try {\n      return await this.fetchData<string>(\"/latest/hash\");\n    } catch (error) {\n      throw new Error(\"Error fetching latest hash.\");\n    }\n  }\n\n  /**\n   * Returns the latest block height\n   *\n   * @example\n   * const latestHeight = networkClient.getLatestHeight();\n   */\n  async getLatestHeight(): Promise<number | Error> {\n    try {\n      return await this.fetchData<number>(\"/latest/height\");\n    } catch (error) {\n      throw new Error(\"Error fetching latest height.\");\n    }\n  }\n\n  /**\n   * Returns the source code of a program given a program ID\n   *\n   * @param {string} programId The program ID of a program deployed to the Aleo Network\n   * @return {Promise<string>} Source code of the program\n   *\n   * @example\n   * const program = networkClient.getProgram(\"hello_hello.aleo\");\n   * const expectedSource = \"program hello_hello.aleo;\\n\\nfunction hello:\\n    input r0 as u32.public;\\n    input r1 as u32.private;\\n    add r0 r1 into r2;\\n    output r2 as u32.private;\\n\"\n   * assert.equal(program, expectedSource);\n   */\n  async getProgram(programId: string): Promise<string | Error> {\n    try {\n      return await this.fetchData<string>(\"/program/\" + programId)\n    } catch (error) {\n      throw new Error(\"Error fetching program\");\n    }\n  }\n\n  /**\n   * Returns a program object from a program ID or program source code\n   *\n   * @param {string} inputProgram The program ID or program source code of a program deployed to the Aleo Network\n   * @return {Promise<Program | Error>} Source code of the program\n   *\n   * @example\n   * const programID = \"hello_hello.aleo\";\n   * const programSource = \"program hello_hello.aleo;\\n\\nfunction hello:\\n    input r0 as u32.public;\\n    input r1 as u32.private;\\n    add r0 r1 into r2;\\n    output r2 as u32.private;\\n\"\n   *\n   * // Get program object from program ID or program source code\n   * const programObjectFromID = await networkClient.getProgramObject(programID);\n   * const programObjectFromSource = await networkClient.getProgramObject(programSource);\n   *\n   * // Both program objects should be equal\n   * assert.equal(programObjectFromID.to_string(), programObjectFromSource.to_string());\n   */\n  async getProgramObject(inputProgram: string): Promise<Program | Error> {\n    try {\n      return Program.fromString(inputProgram);\n    } catch (error) {\n      try {\n        return Program.fromString(<string>(await this.getProgram(inputProgram)));\n      } catch (error) {\n        throw new Error(`${inputProgram} is neither a program name or a valid program`);\n      }\n    }\n  }\n\n  /**\n   *  Returns an object containing the source code of a program and the source code of all programs it imports\n   *\n   * @param {Program | string} inputProgram The program ID or program source code of a program deployed to the Aleo Network\n   * @returns {Promise<ProgramImports>} Object of the form { \"program_id\": \"program_source\", .. } containing program id & source code for all program imports\n   *\n   * @example\n   * const double_test_source = \"import multiply_test.aleo;\\n\\nprogram double_test.aleo;\\n\\nfunction double_it:\\n    input r0 as u32.private;\\n    call multiply_test.aleo/multiply 2u32 r0 into r1;\\n    output r1 as u32.private;\\n\"\n   * const double_test = Program.fromString(double_test_source);\n   * const expectedImports = {\n   *     \"multiply_test.aleo\": \"program multiply_test.aleo;\\n\\nfunction multiply:\\n    input r0 as u32.public;\\n    input r1 as u32.private;\\n    mul r0 r1 into r2;\\n    output r2 as u32.private;\\n\"\n   * }\n   *\n   * // Imports can be fetched using the program ID, source code, or program object\n   * let programImports = await networkClient.getProgramImports(\"double_test.aleo\");\n   * assert.deepStrictEqual(programImports, expectedImports);\n   *\n   * // Using the program source code\n   * programImports = await networkClient.getProgramImports(double_test_source);\n   * assert.deepStrictEqual(programImports, expectedImports);\n   *\n   * // Using the program object\n   * programImports = await networkClient.getProgramImports(double_test);\n   * assert.deepStrictEqual(programImports, expectedImports);\n   */\n  async getProgramImports(inputProgram: Program | string): Promise<ProgramImports | Error> {\n    try {\n      const imports: ProgramImports = {};\n\n      // Get the program object or fail if the program is not valid or does not exist\n      const program = inputProgram instanceof Program ? inputProgram : <Program>(await this.getProgramObject(inputProgram));\n\n      // Get the list of programs that the program imports\n      const importList = program.getImports();\n\n      // Recursively get any imports that the imported programs have in a depth first search order\n      for (let i = 0; i < importList.length; i++) {\n        const import_id = importList[i];\n        if (!imports.hasOwnProperty(import_id)) {\n          const programSource = <string>await this.getProgram(import_id);\n          const nestedImports = <ProgramImports>await this.getProgramImports(import_id);\n          for (const key in nestedImports) {\n            if (!imports.hasOwnProperty(key)) {\n              imports[key] = nestedImports[key];\n            }\n          }\n          imports[import_id] = programSource;\n        }\n      }\n      return imports;\n    } catch (error) {\n      throw logAndThrow(\"Error fetching program imports: \" + error)\n    }\n  }\n\n  /**\n   * Get a list of the program names that a program imports\n   *\n   * @param {Program | string} inputProgram - The program id or program source code to get the imports of\n   * @returns {string[]} - The list of program names that the program imports\n   *\n   * @example\n   * const programImportsNames = networkClient.getProgramImports(\"double_test.aleo\");\n   * const expectedImportsNames = [\"multiply_test.aleo\"];\n   * assert.deepStrictEqual(programImportsNames, expectedImportsNames);\n   */\n  async getProgramImportNames(inputProgram: Program | string): Promise<string[] | Error> {\n    try {\n      const program = inputProgram instanceof Program ? inputProgram : <Program>(await this.getProgramObject(inputProgram));\n      return program.getImports();\n    } catch (error) {\n      throw new Error(\"Error fetching program imports with error: \" + error);\n    }\n  }\n\n  /**\n   * Returns the names of the mappings of a program\n   *\n   * @param {string} programId - The program ID to get the mappings of (e.g. \"credits.aleo\")\n   * @example\n   * const mappings = networkClient.getProgramMappingNames(\"credits.aleo\");\n   * const expectedMappings = [\"account\"];\n   * assert.deepStrictEqual(mappings, expectedMappings);\n   */\n  async getProgramMappingNames(programId: string): Promise<Array<string> | Error> {\n    try {\n      return await this.fetchData<Array<string>>(\"/program/\" + programId + \"/mappings\")\n    } catch (error) {\n      throw new Error(\"Error fetching program mappings - ensure the program exists on chain before trying again\");\n    }\n  }\n\n  /**\n   * Returns the value of a program's mapping for a specific key\n   *\n   * @param {string} programId - The program ID to get the mapping value of (e.g. \"credits.aleo\")\n   * @param {string} mappingName - The name of the mapping to get the value of (e.g. \"account\")\n   * @param {string} key - The key of the mapping to get the value of (e.g. \"aleo1rhgdu77hgyqd3xjj8ucu3jj9r2krwz6mnzyd80gncr5fxcwlh5rsvzp9px\")\n   * @return {Promise<string>} String representation of the value of the mapping\n   *\n   * @example\n   * // Get public balance of an account\n   * const mappingValue = networkClient.getMappingValue(\"credits.aleo\", \"account\", \"aleo1rhgdu77hgyqd3xjj8ucu3jj9r2krwz6mnzyd80gncr5fxcwlh5rsvzp9px\");\n   * const expectedValue = \"0u64\";\n   * assert.equal(mappingValue, expectedValue);\n   */\n  async getProgramMappingValue(programId: string, mappingName: string, key: string): Promise<string | Error> {\n    try {\n      return await this.fetchData<string>(\"/program/\" + programId + \"/mapping/\" + mappingName + \"/\" + key)\n    } catch (error) {\n      throw new Error(\"Error fetching mapping value - ensure the mapping exists and the key is correct\");\n    }\n  }\n\n  /**\n   * Returns the latest state/merkle root of the Aleo blockchain\n   *\n   * @example\n   * const stateRoot = networkClient.getStateRoot();\n   */\n  async getStateRoot(): Promise<string | Error> {\n    try {\n      return await this.fetchData<string>(\"/latest/stateRoot\");\n    } catch (error) {\n      throw new Error(\"Error fetching Aleo state root\");\n    }\n  }\n\n  /**\n   * Returns a transaction by its unique identifier\n   *\n   * @param {string} id\n   * @example\n   * const transaction = networkClient.getTransaction(\"at1handz9xjrqeynjrr0xay4pcsgtnczdksz3e584vfsgaz0dh0lyxq43a4wj\");\n   */\n  async getTransaction(id: string): Promise<Transaction | Error> {\n    try {\n      return await this.fetchData<Transaction>(\"/transaction/\" + id);\n    } catch (error) {\n      throw new Error(\"Error fetching transaction.\");\n    }\n  }\n\n  /**\n   * Returns the transactions present at the specified block height\n   *\n   * @param {number} height\n   * @example\n   * const transactions = networkClient.getTransactions(654);\n   */\n  async getTransactions(height: number): Promise<Array<Transaction> | Error> {\n    try {\n      return await this.fetchData<Array<Transaction>>(\"/block/\" + height.toString() + \"/transactions\");\n    } catch (error) {\n      throw new Error(\"Error fetching transactions.\");\n    }\n  }\n\n  /**\n   * Returns the transactions in the memory pool.\n   *\n   * @example\n   * const transactions = networkClient.getTransactionsInMempool();\n   */\n  async getTransactionsInMempool(): Promise<Array<Transaction> | Error> {\n    try {\n      return await this.fetchData<Array<Transaction>>(\"/memoryPool/transactions\");\n    } catch (error) {\n      throw new Error(\"Error fetching transactions from mempool.\");\n    }\n  }\n\n  /**\n   * Returns the transition id by its unique identifier\n   * @param {string} transition_id - The transition id to get\n   *\n   * @example\n   * const transition = networkClient.getTransitionId(\"2429232855236830926144356377868449890830704336664550203176918782554219952323field\");\n   */\n  async getTransitionId(transition_id: string): Promise<Transition | Error> {\n    try {\n      return await this.fetchData<Transition>(\"/find/transitionID/\" + transition_id);\n    } catch (error) {\n      throw new Error(\"Error fetching transition ID.\");\n    }\n  }\n\n  /**\n   * Submit an execute or deployment transaction to the Aleo network\n   *\n   * @param {WasmTransaction | string} transaction  - The transaction to submit to the network\n   * @returns {string | Error} - The transaction id of the submitted transaction or the resulting error\n   */\n  async submitTransaction(transaction: WasmTransaction | string): Promise<string | Error> {\n    const transaction_string = transaction instanceof WasmTransaction ? transaction.toString() : transaction;\n    try {\n      const response = await axios\n          .post<string>(\n              this.host + \"/transaction/broadcast\",\n              transaction_string,\n              {\n                headers: {\n                  \"Content-Type\": \"application/json\",\n                },\n              },\n          )\n      return response.data;\n    } catch (error) {\n      const axiosError = error as AxiosError;\n      if (axiosError.response) {\n        throw new Error(`Error posting transaction. Aleo network response: ${JSON.stringify(axiosError.response.data)}`);\n      } else if (axiosError.request) {\n        throw new Error(`Error posting transaction. No response received: ${axiosError.message}`);\n      } else {\n        throw new Error(`Error setting up transaction request: ${axiosError.message}`);\n      }\n    }\n  }\n}\n\nexport { AleoNetworkClient, ProgramImports }","import { ProvingKey, VerifyingKey, CREDITS_PROGRAM_KEYS, KEY_STORE, PRIVATE_TRANSFER, PRIVATE_TO_PUBLIC_TRANSFER, PUBLIC_TRANSFER, PUBLIC_TO_PRIVATE_TRANSFER} from \".\";\nimport axios from 'axios';\n\ntype FunctionKeyPair = [ProvingKey, VerifyingKey];\ntype CachedKeyPair = [Uint8Array, Uint8Array];\ntype AleoKeyProviderInitParams = {\n    proverUri?: string;\n    verifierUri?: string;\n    cacheKey?: string;\n};\n\n/**\n * Interface for record search parameters. This allows for arbitrary search parameters to be passed to record provider\n * implementations.\n */\ninterface KeySearchParams {\n    [key: string]: any; // This allows for arbitrary keys with any type values\n}\n\n/**\n * AleoKeyProviderParams search parameter for the AleoKeyProvider. It allows for the specification of a proverUri and\n * verifierUri to fetch keys via HTTP from a remote resource as well as a unique cacheKey to store the keys in memory.\n */\nclass AleoKeyProviderParams implements KeySearchParams {\n    proverUri: string | undefined;\n    verifierUri: string | undefined;\n    cacheKey: string | undefined;\n\n    /**\n     * Create a new AleoKeyProviderParams object which implements the KeySearchParams interface. Users can optionally\n     * specify a url for the proverUri & verifierUri to fetch keys via HTTP from a remote resource as well as a unique\n     * cacheKey to store the keys in memory for future use. If no proverUri or verifierUri is specified, a cachekey must\n     * be provided.\n     *\n     * @param { AleoKeyProviderInitParams } params - Optional search parameters\n     */\n    constructor(params: {proverUri?: string, verifierUri?: string, cacheKey?: string}) {\n        this.proverUri = params.proverUri;\n        this.verifierUri = params.verifierUri;\n        this.cacheKey = params.cacheKey;\n    }\n}\n\n/**\n * KeyProvider interface. Enables the retrieval of public proving and verifying keys for Aleo Programs.\n */\ninterface FunctionKeyProvider {\n    /**\n     * Get arbitrary function keys from a provider\n     *\n     * @param {KeySearchParams | undefined} params - Optional search parameters for the key provider\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the specified program\n     *\n     * @example\n     * // Create a search object which implements the KeySearchParams interface\n     * class IndexDbSearch implements KeySearchParams {\n     *     db: string\n     *     keyId: string\n     *     constructor(params: {db: string, keyId: string}) {\n     *         this.db = params.db;\n     *         this.keyId = params.keyId;\n     *     }\n     * }\n     *\n     * // Create a new object which implements the KeyProvider interface\n     * class IndexDbKeyProvider implements FunctionKeyProvider {\n     *     async functionKeys(params: KeySearchParams): Promise<FunctionKeyPair | Error> {\n     *         return new Promise((resolve, reject) => {\n     *             const request = indexedDB.open(params.db, 1);\n     *\n     *             request.onupgradeneeded = function(e) {\n     *                 const db = e.target.result;\n     *                 if (!db.objectStoreNames.contains('keys')) {\n     *                     db.createObjectStore('keys', { keyPath: 'id' });\n     *                 }\n     *             };\n     *\n     *             request.onsuccess = function(e) {\n     *                 const db = e.target.result;\n     *                 const transaction = db.transaction([\"keys\"], \"readonly\");\n     *                 const store = transaction.objectStore(\"keys\");\n     *                 const request = store.get(params.keyId);\n     *                 request.onsuccess = function(e) {\n     *                     if (request.result) {\n     *                         resolve(request.result as FunctionKeyPair);\n     *                     } else {\n     *                         reject(new Error(\"Key not found\"));\n     *                     }\n     *                 };\n     *                 request.onerror = function(e) { reject(new Error(\"Error fetching key\")); };\n     *             };\n     *\n     *             request.onerror = function(e) { reject(new Error(\"Error opening database\")); };\n     *         });\n     *     }\n     *\n     *     // implement the other methods...\n     * }\n     *\n     *\n     * const keyProvider = new AleoKeyProvider();\n     * const networkClient = new AleoNetworkClient(\"https://vm.aleo.org/api\");\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for value transfers\n     * const programManager = new ProgramManager(\"https://vm.aleo.org/api\", keyProvider, recordProvider);\n     * programManager.transfer(1, \"aleo166q6ww6688cug7qxwe7nhctjpymydwzy2h7rscfmatqmfwnjvggqcad0at\", \"public\", 0.5);\n     *\n     * // Keys can also be fetched manually\n     * const searchParams = new IndexDbSearch({db: \"keys\", keyId: \"credits.aleo:transferPrivate\"});\n     * const [transferPrivateProvingKey, transferPrivateVerifyingKey] = await keyProvider.functionKeys(searchParams);\n     */\n    functionKeys(params?: KeySearchParams): Promise<FunctionKeyPair | Error>;\n\n    /**\n     * Get keys for a variant of the transfer function from the credits.aleo program\n     *\n     * @param {string} visibility Visibility of the transfer function (private, public, privateToPublic, publicToPrivate)\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the specified transfer function\n     *\n     * @example\n     * // Create a new object which implements the KeyProvider interface\n     * const networkClient = new AleoNetworkClient(\"https://vm.aleo.org/api\");\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for value transfers\n     * const programManager = new ProgramManager(\"https://vm.aleo.org/api\", keyProvider, recordProvider);\n     * programManager.transfer(1, \"aleo166q6ww6688cug7qxwe7nhctjpymydwzy2h7rscfmatqmfwnjvggqcad0at\", \"public\", 0.5);\n     *\n     * // Keys can also be fetched manually\n     * const [transferPublicProvingKey, transferPublicVerifyingKey] = await keyProvider.transferKeys(\"public\");\n     */\n    transferKeys(visibility: string): Promise<FunctionKeyPair | Error>;\n\n    /**\n     * Get join function keys from the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the join function\n     */\n    joinKeys(): Promise<FunctionKeyPair | Error>;\n\n    /**\n     * Get split function keys from the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the join function\n     */\n    splitKeys(): Promise<FunctionKeyPair | Error>;\n\n    /**\n     * Get fee_private function keys from the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the join function\n     */\n    feePrivateKeys(): Promise<FunctionKeyPair | Error>;\n\n    /**\n     * Get fee_public function keys from the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the join function\n     */\n    feePublicKeys(): Promise<FunctionKeyPair | Error>;\n\n    /**\n     * Cache a set of keys. This will overwrite any existing keys with the same keyId. The user can check if a keyId\n     * exists in the cache using the containsKeys method prior to calling this method if overwriting is not desired.\n     *\n     * @param {string} keyId access key for the cache\n     * @param {FunctionKeyPair} keys keys to cache\n     */\n    cacheKeys(keyId: string, keys: FunctionKeyPair): void;\n}\n\n/**\n * AleoKeyProvider class. Implements the KeyProvider interface. Enables the retrieval of Aleo program proving and\n * verifying keys for the credits.aleo program over http from official Aleo sources and storing and retrieving function\n * keys from a local memory cache.\n */\nclass AleoKeyProvider implements FunctionKeyProvider {\n    cache: Map<string, CachedKeyPair>;\n    cacheOption: boolean;\n    keyUris: string;\n\n    async fetchBytes(\n        url = \"/\",\n    ): Promise<Uint8Array> {\n        try {\n            const response = await axios.get(url, { responseType: \"arraybuffer\" });\n            return new Uint8Array(<ArrayBuffer>response.data);\n        } catch (error) {\n            throw new Error(\"Error fetching data.\" + error);\n        }\n    }\n\n    constructor() {\n        this.keyUris = KEY_STORE;\n        this.cache = new Map<string, CachedKeyPair>();\n        this.cacheOption = false;\n    }\n\n    /**\n     * Use local memory to store keys\n     *\n     * @param {boolean} useCache whether to store keys in local memory\n     */\n    useCache(useCache: boolean) {\n        this.cacheOption = useCache;\n    }\n\n    /**\n     * Clear the key cache\n     */\n    clearCache() {\n        this.cache.clear();\n    }\n\n    /**\n     * Cache a set of keys. This will overwrite any existing keys with the same keyId. The user can check if a keyId\n     * exists in the cache using the containsKeys method prior to calling this method if overwriting is not desired.\n     *\n     * @param {string} keyId access key for the cache\n     * @param {FunctionKeyPair} keys keys to cache\n     */\n    cacheKeys(keyId: string, keys: FunctionKeyPair) {\n        const [provingKey, verifyingKey] = keys;\n        this.cache.set(keyId, [provingKey.toBytes(), verifyingKey.toBytes()]);\n    }\n\n    /**\n     * Determine if a keyId exists in the cache\n     *\n     * @param {string} keyId keyId of a proving and verifying key pair\n     * @returns {boolean} true if the keyId exists in the cache, false otherwise\n     */\n    containsKeys(keyId: string): boolean {\n        return this.cache.has(keyId)\n    }\n\n    /**\n     * Delete a set of keys from the cache\n     *\n     * @param {string} keyId keyId of a proving and verifying key pair to delete from memory\n     * @returns {boolean} true if the keyId exists in the cache and was deleted, false if the key did not exist\n     */\n    deleteKeys(keyId: string): boolean {\n        return this.cache.delete(keyId)\n    }\n\n    /**\n     * Get a set of keys from the cache\n     * @param keyId keyId of a proving and verifying key pair\n     *\n     * @returns {FunctionKeyPair | Error} Proving and verifying keys for the specified program\n     */\n    getKeys(keyId: string): FunctionKeyPair | Error {\n        console.debug(`Checking if key exists in cache. KeyId: ${keyId}`)\n        if (this.cache.has(keyId)) {\n            const [provingKeyBytes, verifyingKeyBytes] = <CachedKeyPair>this.cache.get(keyId);\n            return [ProvingKey.fromBytes(provingKeyBytes), VerifyingKey.fromBytes(verifyingKeyBytes)];\n        } else {\n            return new Error(\"Key not found in cache.\");\n        }\n    }\n\n    /**\n     * Get arbitrary function keys from a provider\n     *\n     * @param {KeySearchParams} params parameters for the key search in form of: {proverUri: string, verifierUri: string, cacheKey: string}\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the specified program\n     *\n     * @example\n     * // Create a new object which implements the KeyProvider interface\n     * const networkClient = new AleoNetworkClient(\"https://vm.aleo.org/api\");\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     * const AleoProviderParams = new AleoProviderParams(\"https://testnet3.parameters.aleo.org/transfer_private.\");\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for value transfers\n     * const programManager = new ProgramManager(\"https://vm.aleo.org/api\", keyProvider, recordProvider);\n     * programManager.transfer(1, \"aleo166q6ww6688cug7qxwe7nhctjpymydwzy2h7rscfmatqmfwnjvggqcad0at\", \"public\", 0.5);\n     *\n     * // Keys can also be fetched manually using the key provider\n     * const keySearchParams = { \"cacheKey\": \"myProgram:myFunction\" };\n     * const [transferPrivateProvingKey, transferPrivateVerifyingKey] = await keyProvider.functionKeys(keySearchParams);\n     */\n    async functionKeys(params?: KeySearchParams): Promise<FunctionKeyPair | Error> {\n        if (params) {\n            let proverUrl;\n            let verifierUrl;\n            let cacheKey;\n            if (\"proverUrl\" in params && typeof params[\"proverUrl\"] == \"string\") {\n                proverUrl = params[\"proverUrl\"];\n            }\n\n            if (\"verifierUrl\" in params && typeof params[\"verifierUrl\"] == \"string\") {\n                verifierUrl = params[\"verifierUrl\"];\n            }\n\n            if (\"cacheKey\" in params && typeof params[\"cacheKey\"] == \"string\") {\n                cacheKey = params[\"cacheKey\"];\n            }\n\n            if (proverUrl && verifierUrl) {\n                return await this.fetchKeys(proverUrl, verifierUrl, cacheKey);\n            }\n\n            if (cacheKey) {\n                return this.getKeys(cacheKey);\n            }\n        }\n        throw Error(\"Invalid parameters provided, must provide either a cacheKey and/or a proverUrl and a verifierUrl\");\n    }\n\n    /**\n     * Returns the proving and verifying keys for a specified program from a specified url.\n     *\n     * @param {string} verifierUrl Url of the proving key\n     * @param {string} proverUrl Url the verifying key\n     * @param {string} cacheKey Key to store the keys in the cache\n     *\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the specified program\n     *\n     * @example\n     * // Create a new AleoKeyProvider object\n     * const networkClient = new AleoNetworkClient(\"https://vm.aleo.org/api\");\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for value transfers\n     * const programManager = new ProgramManager(\"https://vm.aleo.org/api\", keyProvider, recordProvider);\n     * programManager.transfer(1, \"aleo166q6ww6688cug7qxwe7nhctjpymydwzy2h7rscfmatqmfwnjvggqcad0at\", \"public\", 0.5);\n     *\n     * // Keys can also be fetched manually\n     * const [transferPrivateProvingKey, transferPrivateVerifyingKey] = await keyProvider.fetchKeys(\"https://testnet3.parameters.aleo.org/transfer_private.prover.2a9a6f2\", \"https://testnet3.parameters.aleo.org/transfer_private.verifier.3a59762\");\n     */\n    async fetchKeys(proverUrl: string, verifierUrl: string, cacheKey?: string): Promise<FunctionKeyPair | Error> {\n        try {\n            // If cache is enabled, check if the keys have already been fetched and return them if they have\n            if (this.cacheOption) {\n                if (!cacheKey) {\n                    cacheKey = proverUrl;\n                }\n                const value = this.cache.get(cacheKey);\n                if (typeof value !== \"undefined\") {\n                    return [ProvingKey.fromBytes(value[0]), VerifyingKey.fromBytes(value[1])];\n                } else {\n                    console.debug(\"Fetching proving keys from url \" + proverUrl);\n                    const provingKey = <ProvingKey>ProvingKey.fromBytes(await this.fetchBytes(proverUrl))\n                    console.debug(\"Fetching verifying keys \" + verifierUrl);\n                    const verifyingKey = <VerifyingKey>(await this.getVerifyingKey(verifierUrl));\n                    this.cache.set(cacheKey, [provingKey.toBytes(), verifyingKey.toBytes()]);\n                    return [provingKey, verifyingKey];\n                }\n            }\n            else {\n                // If cache is disabled, fetch the keys and return them\n                const provingKey = <ProvingKey>ProvingKey.fromBytes(await this.fetchBytes(proverUrl))\n                const verifyingKey = <VerifyingKey>(await this.getVerifyingKey(verifierUrl));\n                return [provingKey, verifyingKey];\n            }\n        } catch (error) {\n            throw new Error(`Error: ${error} fetching fee proving and verifying keys from ${proverUrl} and ${verifierUrl}.`);\n        }\n    }\n\n    /**\n     * Returns the proving and verifying keys for the transfer functions in the credits.aleo program\n     * @param {string} visibility Visibility of the transfer function\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the transfer functions\n     *\n     * @example\n     * // Create a new AleoKeyProvider\n     * const networkClient = new AleoNetworkClient(\"https://vm.aleo.org/api\");\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for value transfers\n     * const programManager = new ProgramManager(\"https://vm.aleo.org/api\", keyProvider, recordProvider);\n     * programManager.transfer(1, \"aleo166q6ww6688cug7qxwe7nhctjpymydwzy2h7rscfmatqmfwnjvggqcad0at\", \"public\", 0.5);\n     *\n     * // Keys can also be fetched manually\n     * const [transferPublicProvingKey, transferPublicVerifyingKey] = await keyProvider.transferKeys(\"public\");\n     */\n    async transferKeys(visibility: string): Promise<FunctionKeyPair | Error> {\n        if (PRIVATE_TRANSFER.has(visibility)) {\n            return await this.fetchKeys(CREDITS_PROGRAM_KEYS.transfer_private.prover, CREDITS_PROGRAM_KEYS.transfer_private.verifier);\n        } else if (PRIVATE_TO_PUBLIC_TRANSFER.has(visibility)) {\n            return await this.fetchKeys(CREDITS_PROGRAM_KEYS.transfer_private_to_public.prover, CREDITS_PROGRAM_KEYS.transfer_private_to_public.verifier);\n        } else if (PUBLIC_TRANSFER.has(visibility)) {\n            return await this.fetchKeys(CREDITS_PROGRAM_KEYS.transfer_public.prover, CREDITS_PROGRAM_KEYS.transfer_public.verifier);\n        } else if (PUBLIC_TO_PRIVATE_TRANSFER.has(visibility)) {\n            return await this.fetchKeys(CREDITS_PROGRAM_KEYS.transfer_public_to_private.prover, CREDITS_PROGRAM_KEYS.transfer_public_to_private.verifier);\n        } else {\n            throw new Error(\"Invalid visibility type\");\n        }\n    }\n\n    /**\n     * Returns the proving and verifying keys for the join function in the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the join function\n     */\n    async joinKeys(): Promise<FunctionKeyPair | Error> {\n        return await this.fetchKeys(CREDITS_PROGRAM_KEYS.join.prover, CREDITS_PROGRAM_KEYS.join.verifier);\n    }\n\n    /**\n     * Returns the proving and verifying keys for the split function in the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the split function\n     * */\n    async splitKeys(): Promise<FunctionKeyPair | Error> {\n        return await this.fetchKeys(CREDITS_PROGRAM_KEYS.split.prover, CREDITS_PROGRAM_KEYS.split.verifier);\n    }\n\n    /**\n     * Returns the proving and verifying keys for the fee_private function in the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the fee function\n     */\n    async feePrivateKeys(): Promise<FunctionKeyPair | Error> {\n        return await this.fetchKeys(CREDITS_PROGRAM_KEYS.fee_private.prover, CREDITS_PROGRAM_KEYS.fee_private.verifier);\n    }\n\n    /**\n     * Returns the proving and verifying keys for the fee_public function in the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the fee function\n     */\n    async feePublicKeys(): Promise<FunctionKeyPair | Error> {\n        return await this.fetchKeys(CREDITS_PROGRAM_KEYS.fee_public.prover, CREDITS_PROGRAM_KEYS.fee_public.verifier);\n    }\n\n    /**\n     * Gets a verifying key. If the verifying key is for a credits.aleo function, get it from the wasm cache otherwise\n     *\n     * @returns {Promise<VerifyingKey | Error>} Verifying key for the function\n     */\n    // attempt to fetch it from the network\n    async getVerifyingKey(verifierUrl: string): Promise<VerifyingKey | Error> {\n        switch (verifierUrl) {\n            case CREDITS_PROGRAM_KEYS.fee_private.verifier:\n                return VerifyingKey.fromString(CREDITS_PROGRAM_KEYS.fee_private.verifyingKey);\n            case CREDITS_PROGRAM_KEYS.fee_public.verifier:\n                return VerifyingKey.fromString(CREDITS_PROGRAM_KEYS.fee_public.verifyingKey);\n            case CREDITS_PROGRAM_KEYS.inclusion.verifier:\n                return VerifyingKey.fromString(CREDITS_PROGRAM_KEYS.inclusion.verifyingKey);\n            case CREDITS_PROGRAM_KEYS.join.verifier:\n                return VerifyingKey.fromString(CREDITS_PROGRAM_KEYS.join.verifyingKey);\n            case CREDITS_PROGRAM_KEYS.split.verifier:\n                return VerifyingKey.fromString(CREDITS_PROGRAM_KEYS.split.verifyingKey);\n            case CREDITS_PROGRAM_KEYS.transfer_private.verifier:\n                return VerifyingKey.fromString(CREDITS_PROGRAM_KEYS.transfer_private.verifyingKey);\n            case CREDITS_PROGRAM_KEYS.transfer_private_to_public.verifier:\n                return VerifyingKey.fromString(CREDITS_PROGRAM_KEYS.transfer_private_to_public.verifyingKey);\n            case CREDITS_PROGRAM_KEYS.transfer_public.verifier:\n                return VerifyingKey.fromString(CREDITS_PROGRAM_KEYS.transfer_public.verifyingKey);\n            case CREDITS_PROGRAM_KEYS.transfer_public_to_private.verifier:\n                return VerifyingKey.fromString(CREDITS_PROGRAM_KEYS.transfer_public_to_private.verifyingKey);\n            default:\n                return <VerifyingKey>VerifyingKey.fromBytes(await this.fetchBytes(verifierUrl));\n        }\n    }\n}\n\nexport {AleoKeyProvider, AleoKeyProviderParams, AleoKeyProviderInitParams, CachedKeyPair, FunctionKeyPair, FunctionKeyProvider, KeySearchParams}\n","import { logAndThrow, RecordPlaintext } from \".\";\nimport { Account } from \"./account\";\nimport { AleoNetworkClient } from \"./network-client\";\n\n/**\n * Interface for record search parameters. This allows for arbitrary search parameters to be passed to record provider\n * implementations.\n */\ninterface RecordSearchParams {\n    [key: string]: any; // This allows for arbitrary keys with any type values\n}\n\n/**\n * Interface for a record provider. A record provider is used to find records for use in deployment and execution\n * transactions on the Aleo Network. A default implementation is provided by the NetworkRecordProvider class. However,\n * a custom implementation can be provided (say if records are synced locally to a database from the network) by\n * implementing this interface.\n */\ninterface RecordProvider {\n    account: Account\n\n    /**\n     * Find a credits.aleo record with a given number of microcredits from the chosen provider\n     *\n     * @param {number} microcredits The number of microcredits to search for\n     * @param {boolean} unspent Whether or not the record is unspent\n     * @param {string[]} nonces Nonces of records already found so they are not found again\n     * @param {RecordSearchParams} searchParameters Additional parameters to search for\n     * @returns {Promise<RecordPlaintext | Error>} The record if found, otherwise an error\n     *\n     * @example\n     * // A class implementing record provider can be used to find a record with a given number of microcredits\n     * const record = await recordProvider.findCreditsRecord(5000, true, []);\n     *\n     * // When a record is found but not yet used, its nonce should be added to the nonces array so that it is not\n     * // found again if a subsequent search is performed\n     * const record2 = await recordProvider.findCreditsRecord(5000, true, [record.nonce()]);\n     *\n     * // When the program manager is initialized with the record provider it will be used to find automatically find\n     * // fee records and amount records for value transfers so that they do not need to be specified manually\n     * const programManager = new ProgramManager(\"https://vm.aleo.org/api\", keyProvider, recordProvider);\n     * programManager.transfer(1, \"aleo166q6ww6688cug7qxwe7nhctjpymydwzy2h7rscfmatqmfwnjvggqcad0at\", \"public\", 0.5);\n     */\n    findCreditsRecord(microcredits: number, unspent: boolean,  nonces?: string[], searchParameters?: RecordSearchParams): Promise<RecordPlaintext | Error>;\n\n    /**\n     * Find a list of credit.aleo records with a given number of microcredits from the chosen provider\n     *\n     * @param {number} microcreditAmounts A list of separate microcredit amounts to search for (e.g. [5000, 100000])\n     * @param {boolean} unspent Whether or not the record is unspent\n     * @param {string[]} nonces Nonces of records already found so that they are not found again\n     * @param {RecordSearchParams} searchParameters Additional parameters to search for\n     * @returns {Promise<RecordPlaintext[] | Error>} A list of records with a value greater or equal to the amounts specified if such records exist, otherwise an error\n     *\n     * @example\n     * // A class implementing record provider can be used to find a record with a given number of microcredits\n     * const records = await recordProvider.findCreditsRecords([5000, 5000], true, []);\n     *\n     * // When a record is found but not yet used, it's nonce should be added to the nonces array so that it is not\n     * // found again if a subsequent search is performed\n     * const nonces = [];\n     * records.forEach(record => { nonces.push(record.nonce()) });\n     * const records2 = await recordProvider.findCreditsRecord(5000, true, nonces);\n     *\n     * // When the program manager is initialized with the record provider it will be used to find automatically find\n     * // fee records and amount records for value transfers so that they do not need to be specified manually\n     * const programManager = new ProgramManager(\"https://vm.aleo.org/api\", keyProvider, recordProvider);\n     * programManager.transfer(1, \"aleo166q6ww6688cug7qxwe7nhctjpymydwzy2h7rscfmatqmfwnjvggqcad0at\", \"public\", 0.5);\n     */\n    findCreditsRecords(microcreditAmounts: number[], unspent: boolean, nonces?: string[], searchParameters?: RecordSearchParams): Promise<RecordPlaintext[] | Error>;\n\n    /**\n     * Find an arbitrary record\n     * @param {boolean} unspent Whether or not the record is unspent\n     * @param {string[]} nonces Nonces of records already found so that they are not found again\n     * @param {RecordSearchParams} searchParameters Additional parameters to search for\n     * @returns {Promise<RecordPlaintext | Error>} The record if found, otherwise an error\n     *\n     * @example\n     * // The RecordSearchParams interface can be used to create parameters for custom record searches which can then\n     * // be passed to the record provider. An example of how this would be done for the credits.aleo program is shown\n     * // below.\n     *\n     * class CustomRecordSearch implements RecordSearchParams {\n     *     startHeight: number;\n     *     endHeight: number;\n     *     amount: number;\n     *     program: string;\n     *     recordName: string;\n     *     constructor(startHeight: number, endHeight: number, credits: number, maxRecords: number, programName: string, recordName: string) {\n     *         this.startHeight = startHeight;\n     *         this.endHeight = endHeight;\n     *         this.amount = amount;\n     *         this.program = programName;\n     *         this.recordName = recordName;\n     *     }\n     * }\n     *\n     * const params = new CustomRecordSearch(0, 100, 5000, \"credits.aleo\", \"credits\");\n     *\n     * const record = await recordProvider.findRecord(true, [], params);\n     */\n    findRecord(unspent: boolean, nonces?: string[], searchParameters?: RecordSearchParams): Promise<RecordPlaintext | Error>;\n\n    /**\n     * Find multiple records from arbitrary programs\n     *\n     * @param {boolean} unspent Whether or not the record is unspent\n     * @param {string[]} nonces Nonces of records already found so that they are not found again\n     * @param {RecordSearchParams} searchParameters Additional parameters to search for\n     * @returns {Promise<RecordPlaintext | Error>} The record if found, otherwise an error\n     *\n     * // The RecordSearchParams interface can be used to create parameters for custom record searches which can then\n     * // be passed to the record provider. An example of how this would be done for the credits.aleo program is shown\n     * // below.\n     *\n     * class CustomRecordSearch implements RecordSearchParams {\n     *     startHeight: number;\n     *     endHeight: number;\n     *     amount: number;\n     *     maxRecords: number;\n     *     programName: string;\n     *     recordName: string;\n     *     constructor(startHeight: number, endHeight: number, credits: number, maxRecords: number, programName: string, recordName: string) {\n     *         this.startHeight = startHeight;\n     *         this.endHeight = endHeight;\n     *         this.amount = amount;\n     *         this.maxRecords = maxRecords;\n     *         this.programName = programName;\n     *         this.recordName = recordName;\n     *     }\n     * }\n     *\n     * const params = new CustomRecordSearch(0, 100, 5000, 2, \"credits.aleo\", \"credits\");\n     * const records = await recordProvider.findRecord(true, [], params);\n     */\n    findRecords(unspent: boolean, nonces?: string[], searchParameters?: RecordSearchParams): Promise<RecordPlaintext[] | Error>;\n}\n\n/**\n * A record provider implementation that uses the official Aleo API to find records for usage in program execution and\n * deployment, wallet functionality, and other use cases.\n */\nclass NetworkRecordProvider implements RecordProvider {\n    account: Account;\n    networkClient: AleoNetworkClient;\n    constructor(account: Account, networkClient: AleoNetworkClient) {\n        this.account = account;\n        this.networkClient = networkClient;\n    }\n\n    /**\n     * Set the account used to search for records\n     *\n     * @param {Account} account The account to use for searching for records\n     */\n    setAccount(account: Account) {\n        this.account = account;\n    }\n\n    /**\n     * Find a list of credit records with a given number of microcredits by via the official Aleo API\n     *\n     * @param {number[]} microcredits The number of microcredits to search for\n     * @param {boolean} unspent Whether or not the record is unspent\n     * @param {string[]} nonces Nonces of records already found so that they are not found again\n     * @param {RecordSearchParams} searchParameters Additional parameters to search for\n     * @returns {Promise<RecordPlaintext | Error>} The record if found, otherwise an error\n     *\n     * @example\n     * // Create a new NetworkRecordProvider\n     * const networkClient = new AleoNetworkClient(\"https://vm.aleo.org/api\");\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // The record provider can be used to find records with a given number of microcredits\n     * const record = await recordProvider.findCreditsRecord(5000, true, []);\n     *\n     * // When a record is found but not yet used, it's nonce should be added to the nonces parameter so that it is not\n     * // found again if a subsequent search is performed\n     * const records = await recordProvider.findCreditsRecords(5000, true, [record.nonce()]);\n     *\n     * // When the program manager is initialized with the record provider it will be used to find automatically find\n     * // fee records and amount records for value transfers so that they do not need to be specified manually\n     * const programManager = new ProgramManager(\"https://vm.aleo.org/api\", keyProvider, recordProvider);\n     * programManager.transfer(1, \"aleo166q6ww6688cug7qxwe7nhctjpymydwzy2h7rscfmatqmfwnjvggqcad0at\", \"public\", 0.5);\n     *\n     * */\n    async findCreditsRecords(microcredits: number[], unspent: boolean, nonces?: string[], searchParameters?: RecordSearchParams): Promise<RecordPlaintext[] | Error> {\n        let startHeight = 0;\n        let endHeight = 0;\n\n        if (searchParameters) {\n            if (\"startHeight\" in searchParameters && typeof searchParameters[\"endHeight\"] == \"number\") {\n                startHeight = searchParameters[\"startHeight\"];\n            }\n\n            if (\"endHeight\" in searchParameters && typeof searchParameters[\"endHeight\"] == \"number\") {\n                endHeight = searchParameters[\"endHeight\"];\n            }\n        }\n\n        // If the end height is not specified, use the current block height\n        if (endHeight == 0) {\n            const end = await this.networkClient.getLatestHeight();\n            if (end instanceof Error) {\n                throw logAndThrow(\"Unable to get current block height from the network\")\n            }\n            endHeight = end;\n        }\n\n        // If the start height is greater than the end height, throw an error\n        if (startHeight >= endHeight) {\n            throw logAndThrow(\"Start height must be less than end height\");\n        }\n\n        return await this.networkClient.findUnspentRecords(startHeight, endHeight, this.account.privateKey(), microcredits, undefined, nonces);\n    }\n\n    /**\n     * Find a credit record with a given number of microcredits by via the official Aleo API\n     *\n     * @param {number} microcredits The number of microcredits to search for\n     * @param {boolean} unspent Whether or not the record is unspent\n     * @param {string[]} nonces Nonces of records already found so that they are not found again\n     * @param {RecordSearchParams} searchParameters Additional parameters to search for\n     * @returns {Promise<RecordPlaintext | Error>} The record if found, otherwise an error\n     *\n     * @example\n     * // Create a new NetworkRecordProvider\n     * const networkClient = new AleoNetworkClient(\"https://vm.aleo.org/api\");\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // The record provider can be used to find records with a given number of microcredits\n     * const record = await recordProvider.findCreditsRecord(5000, true, []);\n     *\n     * // When a record is found but not yet used, it's nonce should be added to the nonces parameter so that it is not\n     * // found again if a subsequent search is performed\n     * const records = await recordProvider.findCreditsRecords(5000, true, [record.nonce()]);\n     *\n     * // When the program manager is initialized with the record provider it will be used to find automatically find\n     * // fee records and amount records for value transfers so that they do not need to be specified manually\n     * const programManager = new ProgramManager(\"https://vm.aleo.org/api\", keyProvider, recordProvider);\n     * programManager.transfer(1, \"aleo166q6ww6688cug7qxwe7nhctjpymydwzy2h7rscfmatqmfwnjvggqcad0at\", \"public\", 0.5);\n     */\n    async findCreditsRecord(microcredits: number, unspent: boolean, nonces?: string[], searchParameters?: RecordSearchParams): Promise<RecordPlaintext | Error> {\n        const records = await this.findCreditsRecords([microcredits], unspent, nonces, searchParameters);\n        if (!(records instanceof Error) && records.length > 0) {\n            return records[0];\n        }\n        console.error(\"Record not found with error:\", records);\n        return new Error(\"Record not found\");\n    }\n\n    /**\n     * Find an arbitrary record. WARNING: This function is not implemented yet and will throw an error.\n     */\n    async findRecord(unspent: boolean, nonces?: string[], searchParameters?: RecordSearchParams): Promise<RecordPlaintext | Error> {\n        throw new Error(\"Method not implemented.\");\n    }\n\n    /**\n     * Find multiple arbitrary records. WARNING: This function is not implemented yet and will throw an error.\n     */\n    async findRecords(unspent: boolean, nonces?: string[], searchParameters?: RecordSearchParams): Promise<RecordPlaintext[] | Error> {\n        throw new Error(\"Method not implemented.\");\n    }\n\n}\n\n/**\n * BlockHeightSearch is a RecordSearchParams implementation that allows for searching for records within a given\n * block height range.\n *\n * @example\n * // Create a new BlockHeightSearch\n * const params = new BlockHeightSearch(89995, 99995);\n *\n * // Create a new NetworkRecordProvider\n * const networkClient = new AleoNetworkClient(\"https://vm.aleo.org/api\");\n * const keyProvider = new AleoKeyProvider();\n * const recordProvider = new NetworkRecordProvider(account, networkClient);\n *\n * // The record provider can be used to find records with a given number of microcredits and the block height search\n * // can be used to find records within a given block height range\n * const record = await recordProvider.findCreditsRecord(5000, true, [], params);\n *\n */\nclass BlockHeightSearch implements RecordSearchParams {\n    startHeight: number;\n    endHeight: number;\n    constructor(startHeight: number, endHeight: number) {\n        this.startHeight = startHeight;\n        this.endHeight = endHeight;\n    }\n}\n\nexport { BlockHeightSearch, NetworkRecordProvider, RecordProvider, RecordSearchParams};","import init, {\n    initThreadPool,\n    ProgramManager as WasmProgramManager,\n} from '@aleohq/wasm'\nimport {\n    Account,\n    AleoKeyProvider,\n    AleoNetworkClient,\n    ExecutionResponse,\n    FunctionKeyProvider,\n    FunctionKeyPair,\n    KeySearchParams,\n    RecordPlaintext,\n    RecordProvider,\n    RecordSearchParams,\n    PrivateKey,\n    Program,\n    ProgramImports,\n    ProvingKey,\n    VerifyingKey,\n    PRIVATE_TRANSFER_TYPES,\n    VALID_TRANSFER_TYPES,\n    logAndThrow,\n} from \".\";\n\n\n\n/**\n * The ProgramManager class is used to execute and deploy programs on the Aleo network and create value transfers.\n */\nclass ProgramManager {\n    account: Account | undefined;\n    keyProvider: FunctionKeyProvider;\n    host: string;\n    networkClient: AleoNetworkClient;\n    recordProvider: RecordProvider | undefined;\n    executionEngine: WasmProgramManager;\n\n    /** Create a new instance of the ProgramManager\n     *\n     * @param { string | undefined } host A host uri running the official Aleo API\n     * @param { FunctionKeyProvider | undefined } keyProvider A key provider that implements {@link FunctionKeyProvider} interface\n     * @param { RecordProvider | undefined } recordProvider A record provider that implements {@link RecordProvider} interface\n     */\n    constructor(host: string | undefined, keyProvider: FunctionKeyProvider | undefined, recordProvider: RecordProvider | undefined) {\n        if (!host) {\n            this.host = \"https://vm.aleo.org/api\";\n            this.networkClient = new AleoNetworkClient(this.host);\n        } else {\n            this.host = host;\n            this.networkClient = new AleoNetworkClient(host);\n        }\n\n        if (!keyProvider) {\n            this.keyProvider = new AleoKeyProvider();\n        } else {\n            this.keyProvider = keyProvider;\n        }\n\n        this.executionEngine = new WasmProgramManager();\n        this.recordProvider = recordProvider;\n    }\n\n    /**\n     * Set the account to use for transaction submission to the Aleo network\n     *\n     * @param {Account} account Account to use for transaction submission\n     */\n    setAccount(account: Account) {\n        this.account = account;\n    }\n\n    /**\n     * Set the key provider that provides the proving and verifying keys for programs\n     *\n     * @param {FunctionKeyProvider} keyProvider\n     */\n    setKeyProvider(keyProvider: FunctionKeyProvider) {\n        this.keyProvider = keyProvider;\n    }\n\n    /**\n     * Set the host peer to use for transaction submission to the Aleo network\n     *\n     * @param host {string} Peer url to use for transaction submission\n     */\n    setHost(host: string) {\n        this.host = host;\n        this.networkClient.setHost(host);\n    }\n\n    /**\n     * Set the record provider that provides records for transactions\n     *\n     * @param {RecordProvider} recordProvider\n     */\n    setRecordProvider(recordProvider: RecordProvider) {\n        this.recordProvider = recordProvider;\n    }\n\n    /**\n     * Deploy an Aleo program to the Aleo network\n     *\n     * @param {string} program Program source code\n     * @param {number} fee Fee to pay for the transaction\n     * @param {boolean} privateFee Use a private record to pay the fee. If false this will use the account's public credit balance\n     * @param {RecordSearchParams | undefined} recordSearchParams Optional parameters for searching for a record to use\n     * pay the deployment fee\n     * @param {string | RecordPlaintext | undefined} feeRecord Optional Fee record to use for the transaction\n     * @param {PrivateKey | undefined} privateKey Optional private key to use for the transaction\n     * @returns {string | Error} The transaction id of the deployed program or a failure message from the network\n     *\n     * @example\n     * // Create a new NetworkClient, KeyProvider, and RecordProvider\n     * const networkClient = new AleoNetworkClient(\"https://vm.aleo.org/api\");\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for deployments\n     * const program = \"program hello_hello.aleo;\\n\\nfunction hello:\\n    input r0 as u32.public;\\n    input r1 as u32.private;\\n    add r0 r1 into r2;\\n    output r2 as u32.private;\\n\";\n     * const programManager = new ProgramManager(\"https://vm.aleo.org/api\", keyProvider, recordProvider);\n     *\n     * // Define a fee in credits\n     * const fee = 1.2;\n     *\n     * // Deploy the program\n     * const tx_id = await programManager.deploy(program, fee);\n     *\n     * // Verify the transaction was successful\n     * const transaction = await programManager.networkClient.getTransaction(tx_id);\n     */\n    async deploy(\n        program: string,\n        fee: number,\n        privateFee: boolean,\n        recordSearchParams?: RecordSearchParams,\n        feeRecord?: string | RecordPlaintext,\n        privateKey?: PrivateKey,\n    ): Promise<string | Error> {\n        // Ensure the program is valid and does not exist on the network\n        try {\n            const programObject = Program.fromString(program);\n            let programSource;\n            try {\n                programSource = this.networkClient.getProgram(programObject.id());\n            } catch (e) {\n                // Program does not exist on the network, deployment can proceed\n                console.log(`Program ${programObject.id()} does not exist on the network, deploying...`);\n            }\n            if (typeof programSource == \"string\") {\n                throw (`Program ${programObject.id()} already exists on the network, please rename your program`);\n            }\n        } catch (e) {\n            throw logAndThrow(`Error validating program: ${e}`);\n        }\n\n        // Get the private key from the account if it is not provided in the parameters\n        let deploymentPrivateKey = privateKey;\n        if (typeof privateKey === \"undefined\" && typeof this.account !== \"undefined\") {\n            deploymentPrivateKey = this.account.privateKey();\n        }\n\n        if (typeof deploymentPrivateKey === \"undefined\") {\n            throw(\"No private key provided and no private key set in the ProgramManager\");\n        }\n\n        // Get the fee record from the account if it is not provided in the parameters\n        try {\n            feeRecord = privateFee ? <RecordPlaintext>await this.getCreditsRecord(fee, [], feeRecord, recordSearchParams) : undefined;\n        } catch (e) {\n            throw logAndThrow(`Error finding fee record. Record finder response: '${e}'. Please ensure you're connected to a valid Aleo network and a record with enough balance exists.`);\n        }\n\n        // Get the proving and verifying keys from the key provider\n        let feeKeys;\n        try {\n            feeKeys = privateFee ? <FunctionKeyPair>await this.keyProvider.feePrivateKeys() : <FunctionKeyPair>await this.keyProvider.feePublicKeys();\n        } catch (e) {\n            throw logAndThrow(`Error finding fee keys. Key finder response: '${e}'. Please ensure your key provider is configured correctly.`);\n        }\n        const [feeProvingKey, feeVerifyingKey] = feeKeys;\n\n        // Resolve the program imports if they exist\n        let imports;\n        try {\n            imports = await this.networkClient.getProgramImports(program);\n        } catch (e) {\n            throw logAndThrow(`Error finding program imports. Network response: '${e}'. Please ensure you're connected to a valid Aleo network and the program is deployed to the network.`);\n        }\n\n        // Build a deployment transaction and submit it to the network\n        const tx = await this.executionEngine.buildDeploymentTransaction(deploymentPrivateKey, program, fee, feeRecord, this.host, false, imports, feeProvingKey, feeVerifyingKey);\n        return await this.networkClient.submitTransaction(tx);\n    }\n\n    /**\n     * Execute an Aleo program on the Aleo network\n     *\n     * @param {string} programName Program name containing the function to be executed\n     * @param {string} functionName Function name to execute\n     * @param {number} fee Fee to pay for the transaction\n     * @param {boolean} privateFee Use a private record to pay the fee. If false this will use the account's public credit balance\n     * @param {string[]} inputs Inputs to the function\n     * @param {RecordSearchParams} recordSearchParams Optional parameters for searching for a record to pay the fee for\n     * the execution transaction\n     * @param {KeySearchParams} keySearchParams Optional parameters for finding the matching proving & verifying keys\n     * for the function\n     * @param {string | RecordPlaintext | undefined} feeRecord Optional Fee record to use for the transaction\n     * @param {ProvingKey | undefined} provingKey Optional proving key to use for the transaction\n     * @param {VerifyingKey | undefined} verifyingKey Optional verifying key to use for the transaction\n     * @param {PrivateKey | undefined} privateKey Optional private key to use for the transaction\n     * @returns {Promise<string | Error>}\n     *\n     * @example\n     * // Create a new NetworkClient, KeyProvider, and RecordProvider using official Aleo record, key, and network providers\n     * const networkClient = new AleoNetworkClient(\"https://vm.aleo.org/api\");\n     * const keyProvider = new AleoKeyProvider();\n     * keyProvider.useCache = true;\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for executions\n     * const programName = \"hello_hello.aleo\";\n     * const programManager = new ProgramManager(\"https://vm.aleo.org/api\", keyProvider, recordProvider);\n     * const keySearchParams = { \"cacheKey\": \"hello_hello:hello\" };\n     * const tx_id = await programManager.execute(programName, \"hello_hello\", 0.020, [\"5u32\", \"5u32\"], undefined, undefined, undefined, keySearchParams);\n     * const transaction = await programManager.networkClient.getTransaction(tx_id);\n     */\n    async execute(\n        programName: string,\n        functionName: string,\n        fee: number,\n        privateFee: boolean,\n        inputs: string[],\n        recordSearchParams?: RecordSearchParams,\n        keySearchParams?: KeySearchParams,\n        feeRecord?: string | RecordPlaintext,\n        provingKey?: ProvingKey,\n        verifyingKey?: VerifyingKey,\n        privateKey?: PrivateKey,\n    ): Promise<string | Error> {\n        // Ensure the function exists on the network\n        let program;\n        try {\n            program = <string>(await this.networkClient.getProgram(programName));\n        } catch (e) {\n            throw logAndThrow(`Error finding ${programName}. Network response: '${e}'. Please ensure you're connected to a valid Aleo network the program is deployed to the network.`);\n        }\n\n        // Get the private key from the account if it is not provided in the parameters\n        let executionPrivateKey = privateKey;\n        if (typeof privateKey === \"undefined\" && typeof this.account !== \"undefined\") {\n            executionPrivateKey = this.account.privateKey();\n        }\n\n        if (typeof executionPrivateKey === \"undefined\") {\n            throw(\"No private key provided and no private key set in the ProgramManager\");\n        }\n\n        // Get the fee record from the account if it is not provided in the parameters\n        try {\n            feeRecord = privateFee ? <RecordPlaintext>await this.getCreditsRecord(fee, [], feeRecord, recordSearchParams) : undefined;\n        } catch (e) {\n            throw logAndThrow(`Error finding fee record. Record finder response: '${e}'. Please ensure you're connected to a valid Aleo network and a record with enough balance exists.`);\n        }\n\n        // Get the fee proving and verifying keys from the key provider\n        let feeKeys;\n        try {\n            feeKeys = privateFee ? <FunctionKeyPair>await this.keyProvider.feePrivateKeys() : <FunctionKeyPair>await this.keyProvider.feePublicKeys();\n        } catch (e) {\n            throw logAndThrow(`Error finding fee keys. Key finder response: '${e}'. Please ensure your key provider is configured correctly.`);\n        }\n        const [feeProvingKey, feeVerifyingKey] = feeKeys;\n\n        // If the function proving and verifying keys are not provided, attempt to find them using the key provider\n        if (!provingKey || !verifyingKey) {\n            try {\n                [provingKey, verifyingKey] = <FunctionKeyPair>await this.keyProvider.functionKeys(keySearchParams);\n            } catch (e) {\n                console.log(`Function keys not found. Key finder response: '${e}'. The function keys will be synthesized`)\n            }\n        }\n\n        // Resolve the program imports if they exist\n        let imports;\n        try {\n            imports = await this.networkClient.getProgramImports(programName);\n        } catch (e) {\n            throw logAndThrow(`Error finding program imports. Network response: '${e}'. Please ensure you're connected to a valid Aleo network and the program is deployed to the network.`);\n        }\n\n        // Build an execution transaction and submit it to the network\n        const tx = await this.executionEngine.buildExecutionTransaction(executionPrivateKey, program, functionName, inputs, fee, feeRecord, this.host, false, imports, provingKey, verifyingKey, feeProvingKey, feeVerifyingKey);\n        return await this.networkClient.submitTransaction(tx);\n    }\n\n    /**\n     * Execute an Aleo program in offline mode\n     *\n     * @param {string} program Program source code containing the function to be executed\n     * @param {string} function_name Function name to execute\n     * @param {string[]} inputs Inputs to the function\n     * @param {number} proveExecution Whether to prove the execution of the function and return an execution transcript\n     * that contains the proof.\n     * @param {string[] | undefined} imports Optional imports to the program\n     * @param {KeySearchParams | undefined} keySearchParams Optional parameters for finding the matching proving &\n     * verifying keys for the function\n     * @param {ProvingKey | undefined} provingKey Optional proving key to use for the transaction\n     * @param {VerifyingKey | undefined} verifyingKey Optional verifying key to use for the transaction\n     * @param {PrivateKey | undefined} privateKey Optional private key to use for the transaction\n     * @returns {Promise<string | Error>}\n     *\n     * @example\n     * import { Account, Program } from '@aleohq/sdk';\n     *\n     * /// Create the source for the \"helloworld\" program\n     * const program = \"program helloworld.aleo;\\n\\nfunction hello:\\n    input r0 as u32.public;\\n    input r1 as u32.private;\\n    add r0 r1 into r2;\\n    output r2 as u32.private;\\n\";\n     * const programManager = new ProgramManager();\n     *\n     * /// Create a temporary account for the execution of the program\n     * const account = new Account();\n     * programManager.setAccount(account);\n     *\n     * /// Get the response and ensure that the program executed correctly\n     * const executionResponse = await programManager.executeOffline(program, \"hello\", [\"5u32\", \"5u32\"]);\n     * const result = executionResponse.getOutputs();\n     * assert(result === [\"10u32\"]);\n     */\n    async executeOffline(\n        program: string,\n        function_name: string,\n        inputs: string[],\n        proveExecution: boolean,\n        imports?: ProgramImports,\n        keySearchParams?: KeySearchParams,\n        provingKey?: ProvingKey,\n        verifyingKey?: VerifyingKey,\n        privateKey?: PrivateKey,\n    ): Promise<ExecutionResponse> {\n        // Get the private key from the account if it is not provided in the parameters\n        let executionPrivateKey = privateKey;\n        if (typeof privateKey === \"undefined\" && typeof this.account !== \"undefined\") {\n            executionPrivateKey = this.account.privateKey();\n        }\n\n        if (typeof executionPrivateKey === \"undefined\") {\n            throw(\"No private key provided and no private key set in the ProgramManager\");\n        }\n\n        // If the function proving and verifying keys are not provided, attempt to find them using the key provider\n        if (!provingKey || !verifyingKey) {\n            try {\n                [provingKey, verifyingKey] = <FunctionKeyPair>await this.keyProvider.functionKeys(keySearchParams);\n            } catch (e) {\n                console.log(`Function keys not found. Key finder response: '${e}'. The function keys will be synthesized`)\n            }\n        }\n\n        // Run the program offline and return the result\n        console.log(\"Running program offline\")\n        console.log(\"Proving key: \", provingKey);\n        console.log(\"Verifying key: \", verifyingKey);\n        return this.executionEngine.executeFunctionOffline(executionPrivateKey, program, function_name, inputs, proveExecution,false, imports, provingKey, verifyingKey);\n    }\n\n    /**\n     * Join two credits records into a single credits record\n     *\n     * @param {RecordPlaintext | string} recordOne First credits record to join\n     * @param {RecordPlaintext | string} recordTwo Second credits record to join\n     * @param {number} fee Fee in credits pay for the join transaction\n     * @param {boolean} privateFee Use a private record to pay the fee. If false this will use the account's public credit balance\n     * @param {RecordSearchParams | undefined} recordSearchParams Optional parameters for finding the fee record to use\n     * to pay the fee for the join transaction\n     * @param {RecordPlaintext | string | undefined} feeRecord Fee record to use for the join transaction\n     * @param {PrivateKey | undefined} privateKey Private key to use for the join transaction\n     * @returns {Promise<string | Error>}\n     */\n    async join(\n        recordOne: RecordPlaintext | string,\n        recordTwo: RecordPlaintext | string,\n        fee: number,\n        privateFee: boolean,\n        recordSearchParams?: RecordSearchParams | undefined,\n        feeRecord?: RecordPlaintext | string | undefined,\n        privateKey?: PrivateKey\n    ): Promise<string | Error> {\n        // Get the private key from the account if it is not provided in the parameters\n        let executionPrivateKey = privateKey;\n        if (typeof privateKey === \"undefined\" && typeof this.account !== \"undefined\") {\n            executionPrivateKey = this.account.privateKey();\n        }\n\n        if (typeof executionPrivateKey === \"undefined\") {\n            throw(\"No private key provided and no private key set in the ProgramManager\");\n        }\n\n        // Get the proving and verifying keys from the key provider\n        let feeKeys;\n        let joinKeys\n        try {\n            feeKeys = privateFee ? <FunctionKeyPair>await this.keyProvider.feePrivateKeys() : <FunctionKeyPair>await this.keyProvider.feePublicKeys();\n            joinKeys = <FunctionKeyPair>await this.keyProvider.joinKeys();\n        } catch (e) {\n            throw logAndThrow(`Error finding fee keys. Key finder response: '${e}'. Please ensure your key provider is configured correctly.`);\n        }\n        const [feeProvingKey, feeVerifyingKey] = feeKeys;\n        const [joinProvingKey, joinVerifyingKey] = joinKeys;\n\n        // Get the fee record from the account if it is not provided in the parameters\n        try {\n            feeRecord = privateFee ? <RecordPlaintext>await this.getCreditsRecord(fee, [], feeRecord, recordSearchParams) : undefined;\n        } catch (e) {\n            throw logAndThrow(`Error finding fee record. Record finder response: '${e}'. Please ensure you're connected to a valid Aleo network and a record with enough balance exists.`);\n        }\n\n        // Validate the records provided are valid plaintext records\n        try {\n            recordOne = recordOne instanceof RecordPlaintext ? recordOne : RecordPlaintext.fromString(recordOne);\n            recordTwo = recordTwo instanceof RecordPlaintext ? recordTwo : RecordPlaintext.fromString(recordTwo);\n        } catch (e) {\n            throw logAndThrow('Records provided are not valid. Please ensure they are valid plaintext records.')\n        }\n\n        // Build an execution transaction and submit it to the network\n        const tx = await this.executionEngine.buildJoinTransaction(executionPrivateKey, recordOne, recordTwo, fee, feeRecord, this.host, false, joinProvingKey, joinVerifyingKey, feeProvingKey, feeVerifyingKey);\n        return await this.networkClient.submitTransaction(tx);\n    }\n\n    /**\n     * Split credits into two new credits records\n     *\n     * @param {number} splitAmount Amount in microcredits to split from the original credits record\n     * @param {RecordPlaintext | string} amountRecord Amount record to use for the split transaction\n     * @param {PrivateKey | undefined} privateKey Optional private key to use for the split transaction\n     * @returns {Promise<string | Error>}\n     *\n     * @example\n     * // Create a new NetworkClient, KeyProvider, and RecordProvider\n     * const networkClient = new AleoNetworkClient(\"https://vm.aleo.org/api\");\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for executions\n     * const programName = \"hello_hello.aleo\";\n     * const programManager = new ProgramManager(\"https://vm.aleo.org/api\", keyProvider, recordProvider);\n     * const record = \"{  owner: aleo184vuwr5u7u0ha5f5k44067dd2uaqewxx6pe5ltha5pv99wvhfqxqv339h4.private,  microcredits: 45000000u64.private,  _nonce: 4106205762862305308495708971985748592380064201230396559307556388725936304984group.public}\"\n     * const tx_id = await programManager.split(25000000, record);\n     * const transaction = await programManager.networkClient.getTransaction(tx_id);\n     */\n    async split(splitAmount: number, amountRecord: RecordPlaintext | string, privateKey?: PrivateKey): Promise<string | Error> {\n        // Get the private key from the account if it is not provided in the parameters\n        let executionPrivateKey = privateKey;\n        if (typeof executionPrivateKey === \"undefined\" && typeof this.account !== \"undefined\") {\n            executionPrivateKey = this.account.privateKey();\n        }\n\n        if (typeof executionPrivateKey === \"undefined\") {\n            throw(\"No private key provided and no private key set in the ProgramManager\");\n        }\n\n        // Get the split keys from the key provider\n        let splitKeys;\n        try {\n            splitKeys = <FunctionKeyPair>await this.keyProvider.splitKeys();\n        } catch (e) {\n            throw logAndThrow(`Error finding fee keys. Key finder response: '${e}'. Please ensure your key provider is configured correctly.`);\n        }\n        const [splitProvingKey, splitVerifyingKey] = splitKeys;\n\n        // Validate the record to be split\n        try {\n            amountRecord = amountRecord instanceof RecordPlaintext ? amountRecord : RecordPlaintext.fromString(amountRecord);\n        } catch (e) {\n            throw logAndThrow(\"Record provided is not valid. Please ensure it is a valid plaintext record.\");\n        }\n\n        // Build an execution transaction and submit it to the network\n        const tx = await this.executionEngine.buildSplitTransaction(executionPrivateKey, splitAmount, amountRecord, this.host, false, splitProvingKey, splitVerifyingKey);\n        return await this.networkClient.submitTransaction(tx);\n    }\n\n    /**\n     * Transfer credits to another account\n     *\n     * @param {number} amount The amount of credits to transfer\n     * @param {string} recipient The recipient of the transfer\n     * @param {string} transferType The type of transfer to perform - options: 'private', 'privateToPublic', 'public', 'publicToPrivate'\n     * @param {number} fee The fee to pay for the transfer\n     * @param {boolean} privateFee Use a private record to pay the fee. If false this will use the account's public credit balance\n     * @param {RecordSearchParams | undefined} recordSearchParams Optional parameters for finding the amount and fee\n     * records for the transfer transaction\n     * @param {RecordPlaintext | string} amountRecord Optional amount record to use for the transfer\n     * @param {RecordPlaintext | string} feeRecord Optional fee record to use for the transfer\n     * @param {PrivateKey | undefined} privateKey Optional private key to use for the transfer transaction\n     * @returns {Promise<string | Error>} The transaction id of the transfer transaction\n     *\n     * @example\n     * // Create a new NetworkClient, KeyProvider, and RecordProvider\n     * const networkClient = new AleoNetworkClient(\"https://vm.aleo.org/api\");\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for executions\n     * const programName = \"hello_hello.aleo\";\n     * const programManager = new ProgramManager(\"https://vm.aleo.org/api\", keyProvider, recordProvider);\n     * await programManager.initialize();\n     * const tx_id = await programManager.transfer(1, \"aleo1rhgdu77hgyqd3xjj8ucu3jj9r2krwz6mnzyd80gncr5fxcwlh5rsvzp9px\", \"private\", 0.2)\n     * const transaction = await programManager.networkClient.getTransaction(tx_id);\n     */\n    async transfer(amount: number, recipient: string, transferType: string, fee: number, privateFee: boolean,\n                   recordSearchParams?: RecordSearchParams, amountRecord?: RecordPlaintext | string, feeRecord?: RecordPlaintext | string, privateKey?: PrivateKey): Promise<string | Error> {\n        // Validate the transfer type\n        transferType = <string>validateTransferType(transferType);\n\n        // Get the private key from the account if it is not provided in the parameters\n        let executionPrivateKey = privateKey;\n        if (typeof executionPrivateKey === \"undefined\" && typeof this.account !== \"undefined\") {\n            executionPrivateKey = this.account.privateKey();\n        }\n\n        if (typeof executionPrivateKey === \"undefined\") {\n            throw(\"No private key provided and no private key set in the ProgramManager\");\n        }\n\n        // Get the proving and verifying keys from the key provider\n        let feeKeys;\n        let transferKeys\n        try {\n            feeKeys = privateFee ? <FunctionKeyPair>await this.keyProvider.feePrivateKeys() : <FunctionKeyPair>await this.keyProvider.feePublicKeys();\n            transferKeys = <FunctionKeyPair>await this.keyProvider.transferKeys(transferType);\n        } catch (e) {\n            throw logAndThrow(`Error finding fee keys. Key finder response: '${e}'. Please ensure your key provider is configured correctly.`);\n        }\n        const [feeProvingKey, feeVerifyingKey] = feeKeys;\n        const [transferProvingKey, transferVerifyingKey] = transferKeys;\n\n        // Get the amount and fee record from the account if it is not provided in the parameters\n        try {\n            // Track the nonces of the records found so no duplicate records are used\n            const nonces: string[] = [];\n            if (requiresAmountRecord(transferType)) {\n                // If the transfer type is private and requires an amount record, get it from the record provider\n                amountRecord = <RecordPlaintext>await this.getCreditsRecord(fee, [], amountRecord, recordSearchParams);\n                nonces.push(amountRecord.nonce());\n            } else {\n                amountRecord = undefined;\n            }\n            feeRecord = privateFee ? <RecordPlaintext>await this.getCreditsRecord(fee, nonces, feeRecord, recordSearchParams) : undefined;\n        } catch (e) {\n            throw logAndThrow(`Error finding fee record. Record finder response: '${e}'. Please ensure you're connected to a valid Aleo network and a record with enough balance exists.`);\n        }\n\n        // Build an execution transaction and submit it to the network\n        const tx = await this.executionEngine.buildTransferTransaction(executionPrivateKey, amount, recipient, transferType, amountRecord, fee, feeRecord, this.host, false, transferProvingKey, transferVerifyingKey, feeProvingKey, feeVerifyingKey);\n        return await this.networkClient.submitTransaction(tx);\n    }\n\n    /**\n     * Create a program object from a program's source code\n     *\n     * @param {string} program Program source code\n     * @returns {Program | Error} The program object\n     */\n    createProgramFromSource(program: string): Program | Error {\n        return Program.fromString(program);\n    }\n\n    /**\n     * Get the credits program object\n     *\n     * @returns {Program} The credits program object\n     */\n    creditsProgram(): Program {\n        return Program.getCreditsProgram();\n    }\n\n    /**\n     * Verify a program is valid\n     *\n     * @param {string} program The program source code\n     */\n    verifyProgram(program: string): boolean {\n        try {\n            <Program>Program.fromString(program);\n            return true;\n        } catch (e) {\n            return false;\n        }\n    }\n\n    // Internal utility function for getting a credits.aleo record\n    async getCreditsRecord(amount: number, nonces: string[], record?: RecordPlaintext | string, params?: RecordSearchParams): Promise<RecordPlaintext | Error> {\n        try {\n            return record instanceof RecordPlaintext ? record : RecordPlaintext.fromString(<string>record);\n        } catch (e) {\n            try {\n                const recordProvider = <RecordProvider>this.recordProvider;\n                return <RecordPlaintext>(await recordProvider.findCreditsRecord(amount, true, nonces, params))\n            } catch (e) {\n                throw logAndThrow(`Error finding fee record. Record finder response: '${e}'. Please ensure you're connected to a valid Aleo network and a record with enough balance exists.`);\n            }\n        }\n    }\n}\n\n// Ensure the transfer type requires an amount record\nfunction requiresAmountRecord(transferType: string): boolean {\n    return PRIVATE_TRANSFER_TYPES.has(transferType);\n}\n\n// Validate the transfer type\nfunction validateTransferType(transferType: string): string | Error {\n    return VALID_TRANSFER_TYPES.has(transferType) ? transferType :\n        logAndThrow(`Invalid transfer type '${transferType}'. Valid transfer types are 'private', 'privateToPublic', 'public', and 'publicToPrivate'.`);\n}\n\nexport { ProgramManager }\n","// Experimental example where SDK manages worker\n\nimport { wrap } from \"comlink\";\nimport { WorkerAPI } from './worker';\n\nlet singletonWorker: WorkerAPI | null = null;\n\nconst createAleoWorker = (): WorkerAPI => {\n    if (!singletonWorker) {\n        const worker = new Worker(new URL(\"worker.js\", import.meta.url), {\n            type: \"module\",\n        });\n        singletonWorker = wrap<WorkerAPI>(worker);\n    }\n    return singletonWorker;\n};\n\nexport { createAleoWorker };","import { ProgramManager } from \"./program-manager\";\nimport init from \"@aleohq/wasm\";\n/**\n * Initialize Aleo WebAssembly into the browser. The SDK requires its Wasm Instance to be initialized before operating\n * so this function must be called before any other SDK functions are called.\n */\nasync function initializeWasm() {\n    return await init();\n}\nimport { createAleoWorker } from \"./managed-worker\";\nimport {\n    Address,\n    ExecutionResponse,\n    PrivateKey,\n    PrivateKeyCiphertext,\n    Program,\n    ProvingKey,\n    RecordCiphertext,\n    RecordPlaintext,\n    ProgramManager as ProgramManagerBase,\n    Signature,\n    Transaction as WasmTransaction,\n    ViewKey,\n    VerifyingKey,\n    initThreadPool,\n    verifyFunctionExecution,\n} from \"@aleohq/wasm\";\nexport {\n    Address,\n    ExecutionResponse,\n    PrivateKey,\n    PrivateKeyCiphertext,\n    Program,\n    ProgramManager,\n    ProgramManagerBase,\n    ProvingKey,\n    RecordCiphertext,\n    RecordPlaintext,\n    Signature,\n    VerifyingKey,\n    ViewKey,\n    WasmTransaction,\n    initThreadPool,\n    initializeWasm,\n    verifyFunctionExecution,\n    createAleoWorker,\n};\n","const KEY_STORE = \"https://testnet3.parameters.aleo.org/\";\n\nconst CREDITS_PROGRAM_KEYS = {\n    fee_private: {\n        prover: KEY_STORE + \"fee_private.prover.d02301c\",\n        verifier: \"fee_private.verifier.00ae6a3\",\n        verifyingKey: \"verifier1qygqqqqqqqqqqqp85yqqqqqqqqqy0ggqqqqqqqqqhlaqqqqqqqqqplt2qyqqqqqqqz50xqqqqqqqqqqvqqqqqqqqqqq0r58vs3glghpap9wxma98vx8znu5nx4dr6zw4ukjwnn42jg82xmxtwfs2fz4kqpuxpeh5tmzkwzgpp99qmwwazfppvw4d830cv7d2dwpy5h6r98q6dlp295wt4rcv4vkx6q90pxhrkvd8zd67tnk6xrtgq3c6q5e3v3rypfh3ajyn4e5nnr52svqdd9tvejaauj7lc0dje239fd29wr2fcr2cctaa6wcef6rsqpuzyaj2qahlxdtvwj0c66fnu8d0r076ds2l2z4emd0rzra7yh5w93w52lqe7n3985qwrk0ugyeqvqpq95m45qgesy07j96k6fezqyrzh4s2mtd3nwgqd34gdhg5esplz0428mt7efk7w0rck9jk6t5vf5qun0lutum06l9swsljnvy62qyv9h98ce473xa03u9py2kashf277n8ycze4ec9ln0d7sssvccnv7sq2w90aqrleg7sadlt9xy4ymlqqt5adkwee0g920j4qwt9ch28eqxykctu3ddanan9xwv57n6eh5wsqtkjlse7g9q83c5gaka3gsg0g63j9fl56sy9mgxzdh0ledl85a4xfmu3jnqjlfd33w87yxw00njqszg6fvxnd828hyzgul4x6d3vsctn6jxclpj7v9gjrhvwsmeas8q3r4n5vcfqaccsl2t6vvy4qrzl0qq2ae8jt8y077tnatgy386vkmdpa6h2f6gxh22q09eqptmh9x9m4y8c2t7pgg0hpdnxkj4kez3lpjq08dzp9j9dtsr4vtjxur5c0hrrkvmd3gjzsa7378559gwqunply8hh8clhljequ4tgra2s404yfesqvph2hzaf8vqmx3dd75yllnta94796jg2v4ld054g5ke5esahfwudhpcpfm6fndcmstwcz0rhhsjgq5jetw49vfsrfr0vsala3xt8jvshg46xj9vlx70gcfhanaeqyrlke5xjzc\",\n    },\n    fee_public: {\n        prover: KEY_STORE + \"fee_public.prover.5515650\",\n        verifier: \"fee_public.verifier.40ea40e\",\n        verifyingKey: \"verifier1qygqqqqqqqqqqq9wggqqqqqqqqqtxssqqqqqqqqqxdaqqqqqqqqqpp93qqqqqqqqqrw96qqqqqqqqqqvqqqqqqqqqqqgcegdmfr5a2z7lxv5r9pym8t77stu7xmer78uzdh635u5vg2etr0chrkm2u3k3s9gj4ypk2h96uyp8y04x2x7j9e7g932uk0vx8vau03ett9atggqwxwntlq77mde6k9kt2cfgwjdzk3lcj8xusr7n4cszr2t49ghw8s3yetemp9uq2gv4jwe7d36k96rz8thx05jye0zp2r5u04c6luzys5w39klgdhgg8knsq89h2r6u8tx7h7y2j5422q7dvjj90sn0vgfakgtfh3lwl0f83g90aykdfrsmjm40xed30gnmwxhlqgccvw7sac3hrxeamencv07hu8xwm2k9l34qlujzrtfcv3vdt36tv8c4t972a0gawpaampexfyh62qvjzjmqukzg485klj79rj4tryefz9xa37z74t93590859qqscqc5jjmqjd6uwkdnlpu60tuz4ucnypmz4cem0z2urgkue2q80z7u5fwtpzku4x6yf8vlx8nvtnlpvq7ymh2pkjaaay08557t39qnaw7zggqz4gug53aq7s3rnedfg8d3mkehqfgyvrgj0xag48jnjclp33yhejanx7zcd2ukwjmc75gm4uv022qxrm5h8uyvszmlhq2863vh3c7rl6pplvrqlasngafpnfgvhn4k427k38xqjru4q4x3jcyantaw0neqp54mucvkcdcrryed7ukqlrzx63ryv6hsp63ax4gxlaw0xrw4hfgar2wdeckghzkmza24vc3jt5juqgwwag6rh9x2j8xwujagev89g25605fqye6ld5yjaannpnzmzxtw35w5aglrtmpwwf9zjaw9049ssqlxqmwfqa9t4h7e78k87gsynjhwhuj8y0fmsndmld7ke7tzq3kfsjujxry8g7az0jmrm83qxmgrqsqz8r75cj3rxdx5v9g5n8y2sv5jv2escy2q5qs3k8s6payfkzhv52shuydc\",\n    },\n    inclusion: {\n        prover: KEY_STORE + \"inclusion.prover.b46b287\",\n        verifier: \"inclusion.verifier.2fae105\",\n        verifyingKey: \"verifier1qyyqqqqqqqqqqqzq7qqsqqqqqqqqdugpqqqqqqqqtm7syqqqqqqqpg43qvqqqqqqqzk8sqcqqqqqqqqvqqqqqqqqqqqyjtgkq7td45a5h94srp9yljcvwacqas7empws2j9lklccezgsxp58zta506lkyu6qyk0g8h4eq2ypps3rzg4kjpz7zzutgfd0qj8jw2rnfy68h5asc65tgv89e25fn02kfx002npkuyjdqj8p0urycchcqwy4j85agcdtw7f7ua2tvtq00tk4wc8cc7yqyqwesrt5n6krf0p5penhaj4gfzpefvcnqqf3hlu7qx25n4ng8txtuhyem8lwydlq3qgm8eywzj6uy76943ja58tx3acpcjw0p9c82lxv9ralqrq5z78slqx2v796nzcjmuacrar2yp4remga7qtgm0qcvejgulhp93jamuxvxj20s4ar493pp9hyww5g0prwf7qztkjzpp4nfljdwhra2022z0rnt8mkuryl8rzz8sxxsnf6twzr6pfemlu7z0jclrad92jeswwkul5pmyrwp9e4q5xsgappatw9neup7n0u3lls9cyhlujradvyze6yywdcccchu5p864ad9ahxws3pt36cq8lk49pl3kwkszr8fc3en8u6p9tst9zf6a0hwwcuc8lzx7sh4zhqjyt4umdjl9rr2yg8z875xhqdszxxdnd5nrrv724seqrqs8u3grw85hc2qafl4glrt9s9r49a9zrp8v2akql3l7f00v0wk82el5te5qdtdf2n4a8lgzzth7fyvtxxqse6pye5je2p67l9mnv784ay5t7c4z9u59q5m75r3j7nck9a4e2pyqququmk0pa64xfcyt5kj94730awdad7ch6f22lrr4vv7l0xxsmndhzjnxttk6gw59gt3950xc5gqzsqc5zsj56c0fqpsg8aevq7cl4tj7gj8exmtlq5savkclan8kqr4554m99c8wzwf4u9r4xapktcqttcq33r2dg48kk374rzx9m98prt637cvv0j9mru779cwxytgzndutlx3napjj\",\n    },\n    join: {\n        prover: KEY_STORE + \"join.prover.30895cc\",\n        verifier: \"join.verifier.5cb1e62\",\n        verifyingKey: \"verifier1qygqqqqqqqqqqqqqeuqqqqqqqqqz3ncqqqqqqqqqgvkqzqqqqqqqq590qyqqqqqqqzwn5qgqqqqqqqqvqqqqqqqqqqqpkgztrguz0x8mpfjhsnmqqsnwl764jw73ll0nxcg7pzt59lpd7zsjlmrprw3w6r7npmx4ck4kz3qq7mslfg4rhc9anmgza3dvms2qjhz0hatprzdgmsk3usxkttpep7wej007nzrhzzdmcca2603z4f4cp80q7drqtqw3quvqu5z4nnzspqca272csmxknz9mlwu4u6f9u2zha5rwjgv2hp0l8dlc7aa32dggq9afa5hkqmwnptqmhavy050nf48ndcl6vmjlm95c582wqyws2z5fckxsw6stcxdxxhj7v26padsumqpk58n2f6fejx3k80j2shqa642hulj3sx08ywtxg506n8dnm6nu2ltp4z5apf6wtam9kzaadackjjq6vnahqmqlkuncyslzeml246ajhy5yldyc20p9pf84gn6zdwlq79azygr4fwtvra632w333kh2e3sq4hwtk967gz8zxtsgph0nlncfhqz6wmt5cccd64qwpezp2yuglkrp7jmk4ggkefa5aw09lvhe646gpt0lkjn984uqg6r46a8q3u9vcezmtnq090xkgq0euqtkjrgjks6cxqz9hqw339k8jzepd9nxlhu7sqtv0n0uvz8p3e8wxc784jsvpf4dp92kndr2e6n9p85q8ty4z93l0fn4k7wv6neqkj9y6drya0284qv98y4lthmredwtdlm7p2489etmf473zehyhgpgmu094h97dcyzj22uzwvvayxfjlrv4qlnag2zgcqlma4j7cte6uhsfc98kf54jneuqktsmsacz7gftk9s0cunkevaamkcrt0e086j9lf9vd8eqvkn6esqfsfpjxk4lq94a5mqxgg0eazejt2wtda86l7hj2zxn9k5cy65jp6e97yp8ahakzf6vm0z53te7x9srqeupscxgx8vxla4rqse8srw9ypv3h4q902szlneeuuh4rm46rjnltvt9k\",\n    },\n    split: {\n        prover: KEY_STORE + \"split.prover.a9784b9\",\n        verifier: \"split.verifier.38392d9\",\n        verifyingKey: \"verifier1qygqqqqqqqqqqq8qecqqqqqqqqqqnncqqqqqqqqqr4qqzqqqqqqqpnx4qyqqqqqqqqln7qgqqqqqqqqvqqqqqqqqqqqx4tv4dx9ct4hgwe0cgmqrljgeg88zfepv9gk26d4m2tggqwrj30tgpfatc9654hdggyvymxedz6qqqx3upvdhtl2ux9cvyl3qwtsj5hnqwjpq4xvdvwxggnureuqmhsyegt3k7m3nffxj9zuvkmccmfnczu5y8rd735uwlwa84qq7e092nnsrdyryap6tusdedfwsnkqfllv34l6ny0mlqdrv33jeghluhp5zs88fuc3209j958zh5fuhln6rdleyuk20c7lk4uv79ngx2uh44ed2elvf8ltcj033gg0skmrc5g9tcqrcax5nzyxpafv326m7c8lnz98gks6wlgnyk8qk7qzc4ufp236yuzx94ug8kfsj0tjnvqx6n5ls4yq27fgydj0f4ac6xhjtrqcfa675d4ufs9qdfguexv30rheew7n2n09sng7w5g5mz26dmmmsxnva0luqt2qe9h9jqmn7ajeqadqarvggquz72n94dd5dvpprppjl99lqgzavlp3nph7d4jwzp6txnhxqcecsrt0h5w95v7l8e3qtq274k8427nzl5j3ywy59ssqeagfedxpy3kaytlqmuevluk70tw50drkwaddaspdmfk7ct6s8vurtjg67atnr277xydursaj4trngkndqfhh89tmknmtukcuev77uxhsu3xv2rcr6dqw3mdy7qf6a72ltwkk5g75l4cjxc8ktxwnklcw0nwupqry4xayka9fqngyq9prc022sztk64fqr22qxcv7vtzf5dfhy3j4alqx2vnq6gzhgn8nx7trw8s09txmz6j7jm8v6fwn00evqt46ak5ykd46yfzgpmxuuxut8vxvftzfpq40sl6zhy63c5zusdstaeal9d2rcfpw9pr2pegr2cj307hapacguraxcfrgcq5q2evj9afe7cznp3c99vt44jtngr0jzfn0l6m8xl0aa3cvc75d3xge3sg\",\n    },\n    transfer_private: {\n        prover: KEY_STORE + \"transfer_private.prover.deb77db\",\n        verifier: \"transfer_private.verifier.3088e6d\",\n        verifyingKey: \"verifier1qygqqqqqqqqqqq9n65qqqqqqqqqde4gqqqqqqqqqcfvqzqqqqqqqppl7qyqqqqqqqzuyvqgqqqqqqqqvqqqqqqqqqqqqcqaunljwmh56k2t4sa3ssex2xkw3s9sh30uyfnjq4yeg38kgfex6uferudqklkssu429k2lplcvq28f966yhpcx4jzdan698fzhpv02luxdd4dd6lfux5u5j9nvz2a4zk5yd6zegztlg0rvll27tly0gzx8nqr43yv4jnmspt6j7kcsr8fsvpux9wk9lgt4h386fjmgs2jna7r2ty5fked5kzacw8ay22wq4qp8850903z200suwyjfs3gn6wg08nl3nkvfdkn68fp45dm4hl5xejejdk3d2gxkeju354mhqna34sq2dk92eau0tw8h30plcy933zw6vskst42qkhg6tav9uqzx0f6kluee45ecamgy4sc833lzv3ke6kkq9ypf5tlsndqa2vv3xssgwyhz6awjvprrpzgs9hyehtrjp7c68ecj3h250q9mcf05cnfmrpxmdcgupzelp46jq6kvggkp97pc046fjac6m2nl2s2e63f6lxumcwvey03t2npryvnwmr486m67g4ajlx9mgpvmgv27qrf5tlq7nlpe6ekvnq53rtzwxa6spxpjppc94ntselrdw8fuyx2gevazqrx5dayls52xaszkm3xe365azkxq4n3dmps3mlmk494kxgx435wklfzneu5n8gqjtfh79gkhd7h58avjjju3j4k6edqwxnj8mf3m5qv65qkv2hllshe688x23qs9ttv2fspn93lqzutlyn9gs67rqv0zj8lz274jd43vaxzqv2yaxg9kn9fewancsdmsauw4y688ywgjqj2dekehun27qt5ew6kgl6u4uauju6trpuusk3lvjdxvp8u536pcmm7vzzgelc0cj845933ehsul7e5adr0fspgl76gfet7l5xw896705gf3qymc4j3htxwhgzavzmr0umnfqdd5gaft5r5wgax0kewjguazy0kue2277gpz0hqgvpx0a0y\",\n    },\n    transfer_private_to_public: {\n        prover: KEY_STORE + \"transfer_private_to_public.prover.7ca1421\",\n        verifier: \"transfer_private_to_public.verifier.37dd126\",\n        verifyingKey: \"verifier1qygqqqqqqqqqqqq45vqqqqqqqqqr9gcqqqqqqqqqdqpszqqqqqqqq6tmqyqqqqqqqz302qqqqqqqqqqvqqqqqqqqqqqdr77uvehrw3k8a2ajgeecvtzhfs7e0jarvq699mgme43pz60ez57jm0drlc32arllag3s43xcgvqpezqaxl406uz8eedpe36rxferaxs5sz7w7kxvcj2xys26x24gu4jzjt2fq8s4cjkntp95qs28txjsqsz9a8vqsypzld5v0296aqdt33vzw6ngfacpvtu8tg0ppuvhpkmha7zvcv5v55ekn64sj4heqqsvqplcrkpncg8km3em4grmwp7dfveggayzdu39phkyfrqlxm96mrxzhpmca76f2995j7s787ulcm7epqtvr2wg8fhl7w8shyz5vh203zvmtt69w8hn0349tlx78g0enafs7vq7cfk9tmqpf734e4tzkp83s2qw7fqx4n2chh5ql7jy7dc9raxmzzqurnkctlq0ul38tr9mrw3hqrez6jt5tn74f20x4ya7aygp79sq4jh6gftu7wjrm6dmndm79ynr7vatxckar0tawsr7h08jvacd24pz5sl636vg8dhvedhc3q8ym3rcqjhs2dttxeqsp55kt5srx6qdt9v4ge7mqkptthzz3zjsg8ftd209w590ngn5xmpg606e0w3d8h9cszc7hj6swtk9xucm9vsz8kvcmcz2ny5mrv6wyy7nzjaq5rvsxsf4g9lmaa5dh8jvrhd78wynfaehcqvn7v93c6hqz7s8znzfcckgygetl7anv0a4g2x9tgey9qzvuy9zvjh0mcd3zcexa929cs65hvtz56qdwvfcevx2vfmcgwp5qm4xzny66z4xplm5ajr6hjvt55jnw8mcpf8unj3qk9z2w9xrtal9ndnru2upcju0yq3cyzqg7sejuqclc4wwu2wn7ceaxswmt5t4cekjrfg7zgxwng8pu0l988lk47zg44asr75szg6zn4k7sjqf393zr27t9e29plyn29r45l6j47765f0r9tw489tsgwqgu2\",\n    },\n    transfer_public: {\n        prover: KEY_STORE + \"transfer_public.prover.2941ad3\",\n        verifier: \"transfer_public.verifier.ed98d35\",\n        verifyingKey: \"verifier1qygqqqqqqqqqqq9hggqqqqqqqqqtsssqqqqqqqqqk4aqqqqqqqqqpz9nqqqqqqqqqr596qqqqqqqqqqvqqqqqqqqqqqpf55jjwuf23j9etvgw8ewld2xx6u9as0za0w993q5374fklcucxaqmn8mdeyltg9w6x775d3mxcyqs9a0vw2mzta52usy60c9n3dht98pnek76sg2s7vnjvu3dpyhlyzaqxya3jjt0grk8jrc6z0xcajsrlsy74sgzfl5g2zpxv585aavv44e28q2fmhnw8gw4nyfg9trfn3d8d39yuze6rqnx70aqfqumdgzqqrad6kmnm6nrkww2l4xu0gt4t467m24hk60ra9lyd3jkzs6v8l57nmupn0dz6t0k77lutj68z4vqqruuqwuh72gc0xl9x8c6d0ufuffdfp63x82xe8r65a25qhx2d0n44ve6m4fln2m9ck8tslh3kqa3uqn6cg53l8x4yv44a00kpy5nprz0kmf5xm62xkkny4vua85fanzq6u9zsqg7mm3yq3p5s22m0xd54cq98um775vscxfnsf54gzryqkt253v0pynrllxr0cymt6w9l05trnlw7egg7f4ld8d5jdzxky82m6sq025a96ewr9vmdnyhve3724e6hdn60yrme4jagdtjxavxhtmm2zn86aq0v5t0zgdesu3m79euw3sqyqzm93v8etujswag742nc6zugwtccmtxxfllxx7vzqhygzvqk0ujgft2hhltetg2w5n73dhz9ufnqgdqmqe00eq08amtpxs5kl3c5hdutgq9zmfac4ke08frt0e09vrf0y6kdh3z3hq08d88gp7n8c22vqdr6sqyg3uxspk0x77rrr43q284nj62ll7dufxwq4hpx0qw2dgsayw9wzjngh0l00j9kah0mvx25yqmumjessw3k7j4g8esk6u33wk3344x0nfha9cu84lnp649jhdmq7rwxumel7xq6nx9syzs4tn7ncgqrvk83lza285cz6r3gf3j79n4c4pmtn42vsjj2t3f57ceha4kvupct6ss4\",\n    },\n    transfer_public_to_private: {\n        prover: KEY_STORE + \"transfer_public_to_private.prover.67f57fc\",\n        verifier: \"transfer_public_to_private.verifier.f2aaeee\",\n        verifyingKey: \"verifier1qygqqqqqqqqqqqqswsqqqqqqqqqpuaqqqqqqqqqqdm9sqqqqqqqqp2pwqyqqqqqqqrp26qqqqqqqqqqvqqqqqqqqqqqdmukmllrvx44ed40um3qe2yq58lmvajsqucq2x8egmls6x8jyeusvn6pzcph4hw25nrsr5p6g60ypayclhdergx3zx4x67unesl33fxv6xkm5tzf5k3ehdf67faut52l5u4npsq0zqlh5w2tk02jaj8hcq4z6fypqg9yh83xwh6z6xcvx3vqpu08whfuvcefk30xg5z7xu3mqleshpmzu6060aucm90jjtfgrsqau7shuwwtgghzgcaxj2ruje6y5jag6jy5nrvgxuyjdawg9t29upzv5qzz2zl6gmpmlzum58du4hqqhnrfc2uvx45c8zp5xa68pqlvhzexmucsujwuvff6f9jrxpg7jtretg9er7n0qsv34jtjjrgpqqzqq50qa7vljmn20lsfu2zc3nnzntrcr5wt880ywdykya5jv23cywlc4nyvdcqsc9wxly77falzt79cq9wuls5euc7d8thyqhnuehnjztfshr5syks9zra6yrt7hk6rvnv5d9jypehqkfhz2m0avcwksaxgqpcgw72pg7edz4fdfp4tfhynzarav9yrjm09gu2wgfcde0cq5kd4uq0znmen5jeu0wmfpden3c50rqpjjdwgyjrsnffzfjnswa7dcacz8dgk7h48q0xtz442hvalaeveyxm86e9t5f437krv5tjrenzr4vqgzm8uag6azkty05y7ngfpwzkra9ytqqhfuvp5h2eush3m4y2cxu3vc77pzc7wmesdhhhtqzhxc0qqujxpatu4p56u3hh4rnzyj7pqnqrc0s2h93vsjnj7uax633d0tk266mls44rwthp7c4y9lxy5naqvqqr8cy3hj46zgjlvkk7arh7vet60gpqz68ynrawxqacrry0k7tu3u8xtkp6xeg5jeumu4g7uaw9mcr7u9qxy9tjqma4r8awswqg9k8306f3u408z3z937pmhtu9gj68qp8h0zpz\",\n    },\n};\n\nconst PRIVATE_TRANSFER_TYPES = new Set([\n    \"transfer_private\",\n    \"private\",\n    \"transferPrivate\",\n    \"transfer_private_to_public\",\n    \"privateToPublic\",\n    \"transferPrivateToPublic\",\n]);\nconst VALID_TRANSFER_TYPES = new Set([\n    \"transfer_private\",\n    \"private\",\n    \"transferPrivate\",\n    \"transfer_private_to_public\",\n    \"privateToPublic\",\n    \"transferPrivateToPublic\",\n    \"transfer_public\",\n    \"public\",\n    \"transferPublic\",\n    \"transfer_public_to_private\",\n    \"publicToPrivate\",\n    \"transferPublicToPrivate\",\n]);\nconst PRIVATE_TRANSFER = new Set([\n    \"private\",\n    \"transfer_private\",\n    \"transferPrivate\",\n]);\nconst PRIVATE_TO_PUBLIC_TRANSFER = new Set([\n    \"private_to_public\",\n    \"privateToPublic\",\n    \"transfer_private_to_public\",\n    \"transferPrivateToPublic\",\n]);\nconst PUBLIC_TRANSFER = new Set([\n    \"public\",\n    \"transfer_public\",\n    \"transferPublic\",\n]);\nconst PUBLIC_TO_PRIVATE_TRANSFER = new Set([\n    \"public_to_private\",\n    \"publicToPrivate\",\n    \"transfer_public_to_private\",\n    \"transferPublicToPrivate\",\n]);\n\nfunction logAndThrow(message: string): Error {\n    console.error(message);\n    throw message;\n}\n\nimport { Account } from \"./account\";\nimport { AleoNetworkClient, ProgramImports } from \"./network-client\";\nimport { Block } from \"./models/block\";\nimport { Execution } from \"./models/execution\";\nimport { Input } from \"./models/input\";\nimport { Output } from \"./models/output\";\nimport { Transaction } from \"./models/transaction\";\nimport { Transition } from \"./models/transition\";\nimport {\n    AleoKeyProvider,\n    AleoKeyProviderParams,\n    AleoKeyProviderInitParams,\n    FunctionKeyPair,\n    FunctionKeyProvider,\n    KeySearchParams,\n} from \"./function-key-provider\";\nimport {\n    BlockHeightSearch,\n    NetworkRecordProvider,\n    RecordProvider,\n    RecordSearchParams,\n} from \"./record-provider\";\n\nexport {\n    Account,\n    AleoKeyProvider,\n    AleoKeyProviderParams,\n    AleoKeyProviderInitParams,\n    AleoNetworkClient,\n    Block,\n    BlockHeightSearch,\n    Execution,\n    FunctionKeyPair,\n    FunctionKeyProvider,\n    Input,\n    KeySearchParams,\n    NetworkRecordProvider,\n    ProgramImports,\n    Output,\n    RecordProvider,\n    RecordSearchParams,\n    Transaction,\n    Transition,\n    CREDITS_PROGRAM_KEYS,\n    KEY_STORE,\n    PRIVATE_TRANSFER,\n    PRIVATE_TO_PUBLIC_TRANSFER,\n    PRIVATE_TRANSFER_TYPES,\n    PUBLIC_TRANSFER,\n    PUBLIC_TO_PRIVATE_TRANSFER,\n    VALID_TRANSFER_TYPES,\n    logAndThrow,\n};\n\n// If using the SDK in a browser context, uncomment this line and run `npm run build:browser`\nexport * from './browser';\n\n// The following imports and exports are for a NodeJS context - if using the SDK in a browser context, delete or comment out this line\n// export * from './node';\n","/**\n * @license\n * Copyright 2019 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nconst proxyMarker = Symbol(\"Comlink.proxy\");\nconst createEndpoint = Symbol(\"Comlink.endpoint\");\nconst releaseProxy = Symbol(\"Comlink.releaseProxy\");\nconst finalizer = Symbol(\"Comlink.finalizer\");\nconst throwMarker = Symbol(\"Comlink.thrown\");\nconst isObject = (val) => (typeof val === \"object\" && val !== null) || typeof val === \"function\";\n/**\n * Internal transfer handle to handle objects marked to proxy.\n */\nconst proxyTransferHandler = {\n    canHandle: (val) => isObject(val) && val[proxyMarker],\n    serialize(obj) {\n        const { port1, port2 } = new MessageChannel();\n        expose(obj, port1);\n        return [port2, [port2]];\n    },\n    deserialize(port) {\n        port.start();\n        return wrap(port);\n    },\n};\n/**\n * Internal transfer handler to handle thrown exceptions.\n */\nconst throwTransferHandler = {\n    canHandle: (value) => isObject(value) && throwMarker in value,\n    serialize({ value }) {\n        let serialized;\n        if (value instanceof Error) {\n            serialized = {\n                isError: true,\n                value: {\n                    message: value.message,\n                    name: value.name,\n                    stack: value.stack,\n                },\n            };\n        }\n        else {\n            serialized = { isError: false, value };\n        }\n        return [serialized, []];\n    },\n    deserialize(serialized) {\n        if (serialized.isError) {\n            throw Object.assign(new Error(serialized.value.message), serialized.value);\n        }\n        throw serialized.value;\n    },\n};\n/**\n * Allows customizing the serialization of certain values.\n */\nconst transferHandlers = new Map([\n    [\"proxy\", proxyTransferHandler],\n    [\"throw\", throwTransferHandler],\n]);\nfunction isAllowedOrigin(allowedOrigins, origin) {\n    for (const allowedOrigin of allowedOrigins) {\n        if (origin === allowedOrigin || allowedOrigin === \"*\") {\n            return true;\n        }\n        if (allowedOrigin instanceof RegExp && allowedOrigin.test(origin)) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction expose(obj, ep = globalThis, allowedOrigins = [\"*\"]) {\n    ep.addEventListener(\"message\", function callback(ev) {\n        if (!ev || !ev.data) {\n            return;\n        }\n        if (!isAllowedOrigin(allowedOrigins, ev.origin)) {\n            console.warn(`Invalid origin '${ev.origin}' for comlink proxy`);\n            return;\n        }\n        const { id, type, path } = Object.assign({ path: [] }, ev.data);\n        const argumentList = (ev.data.argumentList || []).map(fromWireValue);\n        let returnValue;\n        try {\n            const parent = path.slice(0, -1).reduce((obj, prop) => obj[prop], obj);\n            const rawValue = path.reduce((obj, prop) => obj[prop], obj);\n            switch (type) {\n                case \"GET\" /* MessageType.GET */:\n                    {\n                        returnValue = rawValue;\n                    }\n                    break;\n                case \"SET\" /* MessageType.SET */:\n                    {\n                        parent[path.slice(-1)[0]] = fromWireValue(ev.data.value);\n                        returnValue = true;\n                    }\n                    break;\n                case \"APPLY\" /* MessageType.APPLY */:\n                    {\n                        returnValue = rawValue.apply(parent, argumentList);\n                    }\n                    break;\n                case \"CONSTRUCT\" /* MessageType.CONSTRUCT */:\n                    {\n                        const value = new rawValue(...argumentList);\n                        returnValue = proxy(value);\n                    }\n                    break;\n                case \"ENDPOINT\" /* MessageType.ENDPOINT */:\n                    {\n                        const { port1, port2 } = new MessageChannel();\n                        expose(obj, port2);\n                        returnValue = transfer(port1, [port1]);\n                    }\n                    break;\n                case \"RELEASE\" /* MessageType.RELEASE */:\n                    {\n                        returnValue = undefined;\n                    }\n                    break;\n                default:\n                    return;\n            }\n        }\n        catch (value) {\n            returnValue = { value, [throwMarker]: 0 };\n        }\n        Promise.resolve(returnValue)\n            .catch((value) => {\n            return { value, [throwMarker]: 0 };\n        })\n            .then((returnValue) => {\n            const [wireValue, transferables] = toWireValue(returnValue);\n            ep.postMessage(Object.assign(Object.assign({}, wireValue), { id }), transferables);\n            if (type === \"RELEASE\" /* MessageType.RELEASE */) {\n                // detach and deactive after sending release response above.\n                ep.removeEventListener(\"message\", callback);\n                closeEndPoint(ep);\n                if (finalizer in obj && typeof obj[finalizer] === \"function\") {\n                    obj[finalizer]();\n                }\n            }\n        })\n            .catch((error) => {\n            // Send Serialization Error To Caller\n            const [wireValue, transferables] = toWireValue({\n                value: new TypeError(\"Unserializable return value\"),\n                [throwMarker]: 0,\n            });\n            ep.postMessage(Object.assign(Object.assign({}, wireValue), { id }), transferables);\n        });\n    });\n    if (ep.start) {\n        ep.start();\n    }\n}\nfunction isMessagePort(endpoint) {\n    return endpoint.constructor.name === \"MessagePort\";\n}\nfunction closeEndPoint(endpoint) {\n    if (isMessagePort(endpoint))\n        endpoint.close();\n}\nfunction wrap(ep, target) {\n    return createProxy(ep, [], target);\n}\nfunction throwIfProxyReleased(isReleased) {\n    if (isReleased) {\n        throw new Error(\"Proxy has been released and is not useable\");\n    }\n}\nfunction releaseEndpoint(ep) {\n    return requestResponseMessage(ep, {\n        type: \"RELEASE\" /* MessageType.RELEASE */,\n    }).then(() => {\n        closeEndPoint(ep);\n    });\n}\nconst proxyCounter = new WeakMap();\nconst proxyFinalizers = \"FinalizationRegistry\" in globalThis &&\n    new FinalizationRegistry((ep) => {\n        const newCount = (proxyCounter.get(ep) || 0) - 1;\n        proxyCounter.set(ep, newCount);\n        if (newCount === 0) {\n            releaseEndpoint(ep);\n        }\n    });\nfunction registerProxy(proxy, ep) {\n    const newCount = (proxyCounter.get(ep) || 0) + 1;\n    proxyCounter.set(ep, newCount);\n    if (proxyFinalizers) {\n        proxyFinalizers.register(proxy, ep, proxy);\n    }\n}\nfunction unregisterProxy(proxy) {\n    if (proxyFinalizers) {\n        proxyFinalizers.unregister(proxy);\n    }\n}\nfunction createProxy(ep, path = [], target = function () { }) {\n    let isProxyReleased = false;\n    const proxy = new Proxy(target, {\n        get(_target, prop) {\n            throwIfProxyReleased(isProxyReleased);\n            if (prop === releaseProxy) {\n                return () => {\n                    unregisterProxy(proxy);\n                    releaseEndpoint(ep);\n                    isProxyReleased = true;\n                };\n            }\n            if (prop === \"then\") {\n                if (path.length === 0) {\n                    return { then: () => proxy };\n                }\n                const r = requestResponseMessage(ep, {\n                    type: \"GET\" /* MessageType.GET */,\n                    path: path.map((p) => p.toString()),\n                }).then(fromWireValue);\n                return r.then.bind(r);\n            }\n            return createProxy(ep, [...path, prop]);\n        },\n        set(_target, prop, rawValue) {\n            throwIfProxyReleased(isProxyReleased);\n            // FIXME: ES6 Proxy Handler `set` methods are supposed to return a\n            // boolean. To show good will, we return true asynchronously ¯\\_(ツ)_/¯\n            const [value, transferables] = toWireValue(rawValue);\n            return requestResponseMessage(ep, {\n                type: \"SET\" /* MessageType.SET */,\n                path: [...path, prop].map((p) => p.toString()),\n                value,\n            }, transferables).then(fromWireValue);\n        },\n        apply(_target, _thisArg, rawArgumentList) {\n            throwIfProxyReleased(isProxyReleased);\n            const last = path[path.length - 1];\n            if (last === createEndpoint) {\n                return requestResponseMessage(ep, {\n                    type: \"ENDPOINT\" /* MessageType.ENDPOINT */,\n                }).then(fromWireValue);\n            }\n            // We just pretend that `bind()` didn’t happen.\n            if (last === \"bind\") {\n                return createProxy(ep, path.slice(0, -1));\n            }\n            const [argumentList, transferables] = processArguments(rawArgumentList);\n            return requestResponseMessage(ep, {\n                type: \"APPLY\" /* MessageType.APPLY */,\n                path: path.map((p) => p.toString()),\n                argumentList,\n            }, transferables).then(fromWireValue);\n        },\n        construct(_target, rawArgumentList) {\n            throwIfProxyReleased(isProxyReleased);\n            const [argumentList, transferables] = processArguments(rawArgumentList);\n            return requestResponseMessage(ep, {\n                type: \"CONSTRUCT\" /* MessageType.CONSTRUCT */,\n                path: path.map((p) => p.toString()),\n                argumentList,\n            }, transferables).then(fromWireValue);\n        },\n    });\n    registerProxy(proxy, ep);\n    return proxy;\n}\nfunction myFlat(arr) {\n    return Array.prototype.concat.apply([], arr);\n}\nfunction processArguments(argumentList) {\n    const processed = argumentList.map(toWireValue);\n    return [processed.map((v) => v[0]), myFlat(processed.map((v) => v[1]))];\n}\nconst transferCache = new WeakMap();\nfunction transfer(obj, transfers) {\n    transferCache.set(obj, transfers);\n    return obj;\n}\nfunction proxy(obj) {\n    return Object.assign(obj, { [proxyMarker]: true });\n}\nfunction windowEndpoint(w, context = globalThis, targetOrigin = \"*\") {\n    return {\n        postMessage: (msg, transferables) => w.postMessage(msg, targetOrigin, transferables),\n        addEventListener: context.addEventListener.bind(context),\n        removeEventListener: context.removeEventListener.bind(context),\n    };\n}\nfunction toWireValue(value) {\n    for (const [name, handler] of transferHandlers) {\n        if (handler.canHandle(value)) {\n            const [serializedValue, transferables] = handler.serialize(value);\n            return [\n                {\n                    type: \"HANDLER\" /* WireValueType.HANDLER */,\n                    name,\n                    value: serializedValue,\n                },\n                transferables,\n            ];\n        }\n    }\n    return [\n        {\n            type: \"RAW\" /* WireValueType.RAW */,\n            value,\n        },\n        transferCache.get(value) || [],\n    ];\n}\nfunction fromWireValue(value) {\n    switch (value.type) {\n        case \"HANDLER\" /* WireValueType.HANDLER */:\n            return transferHandlers.get(value.name).deserialize(value.value);\n        case \"RAW\" /* WireValueType.RAW */:\n            return value.value;\n    }\n}\nfunction requestResponseMessage(ep, msg, transfers) {\n    return new Promise((resolve) => {\n        const id = generateUUID();\n        ep.addEventListener(\"message\", function l(ev) {\n            if (!ev.data || !ev.data.id || ev.data.id !== id) {\n                return;\n            }\n            ep.removeEventListener(\"message\", l);\n            resolve(ev.data);\n        });\n        if (ep.start) {\n            ep.start();\n        }\n        ep.postMessage(Object.assign({ id }, msg), transfers);\n    });\n}\nfunction generateUUID() {\n    return new Array(4)\n        .fill(0)\n        .map(() => Math.floor(Math.random() * Number.MAX_SAFE_INTEGER).toString(16))\n        .join(\"-\");\n}\n\nexport { createEndpoint, expose, finalizer, proxy, proxyMarker, releaseProxy, transfer, transferHandlers, windowEndpoint, wrap };\n//# sourceMappingURL=comlink.mjs.map\n"],"names":["waitForMsgType","target","type","Promise","resolve","addEventListener","onMsg","data","removeEventListener","_workers","async","startWorkers","module","memory","builder","workerInit","receiver","all","Array","from","length","numThreads","worker","Worker","URL","postMessage","build","self","then","pkg","default","wbg_rayon_start_worker","Account","_privateKey","_viewKey","_address","constructor","params","this","privateKeyFromParams","e","console","error","Error","ViewKey","from_private_key","Address","fromCiphertext","ciphertext","password","PrivateKeyCiphertext","fromString","PrivateKey","fromPrivateKeyCiphertext","privateKey","to_string","seed","from_seed_unchecked","from_string","viewKey","address","toString","encryptAccount","toCiphertext","decryptRecord","decrypt","decryptRecords","ciphertexts","map","ownsRecordCiphertext","isOwner","RecordCiphertext","sign","message","verify","signature","AleoNetworkClient","host","account","setAccount","getAccount","setHost","fetchData","url","axios","get","findUnspentRecords","startHeight","endHeight","amounts","maxMicrocredits","nonces","records","start","end","resolvedPrivateKey","latestHeight","failures","totalRecordValue","BigInt","to_view_key","blockHeight","getLatestHeight","blocks","getBlockRange","i","transactions","j","confirmedTransaction","transaction","execution","transitions","k","transition","program","outputs","l","output","record","value","recordPlaintext","nonce","includes","serialNumber","serialNumberString","getTransitionId","push","microcredits","amounts_found","warn","getBlock","height","getLatestBlock","getLatestHash","getProgram","programId","getProgramObject","inputProgram","Program","getProgramImports","imports","importList","getImports","import_id","hasOwnProperty","programSource","nestedImports","key","logAndThrow","getProgramImportNames","getProgramMappingNames","getProgramMappingValue","mappingName","getStateRoot","getTransaction","id","getTransactions","getTransactionsInMempool","transition_id","submitTransaction","transaction_string","Transaction","post","headers","axiosError","response","JSON","stringify","request","AleoKeyProviderParams","proverUri","verifierUri","cacheKey","AleoKeyProvider","cache","cacheOption","keyUris","fetchBytes","responseType","Uint8Array","KEY_STORE","Map","useCache","clearCache","clear","cacheKeys","keyId","keys","provingKey","verifyingKey","set","toBytes","containsKeys","has","deleteKeys","delete","getKeys","debug","provingKeyBytes","verifyingKeyBytes","ProvingKey","fromBytes","VerifyingKey","functionKeys","proverUrl","verifierUrl","fetchKeys","getVerifyingKey","transferKeys","visibility","PRIVATE_TRANSFER","CREDITS_PROGRAM_KEYS","transfer_private","prover","verifier","PRIVATE_TO_PUBLIC_TRANSFER","transfer_private_to_public","PUBLIC_TRANSFER","transfer_public","PUBLIC_TO_PRIVATE_TRANSFER","transfer_public_to_private","joinKeys","join","splitKeys","split","feePrivateKeys","fee_private","feePublicKeys","fee_public","inclusion","NetworkRecordProvider","networkClient","findCreditsRecords","unspent","searchParameters","undefined","findCreditsRecord","findRecord","findRecords","BlockHeightSearch","ProgramManager","keyProvider","recordProvider","executionEngine","ProgramManager$1","setKeyProvider","setRecordProvider","deploy","fee","privateFee","recordSearchParams","feeRecord","programObject","log","feeKeys","deploymentPrivateKey","getCreditsRecord","feeProvingKey","feeVerifyingKey","tx","buildDeploymentTransaction","execute","programName","functionName","inputs","keySearchParams","executionPrivateKey","buildExecutionTransaction","executeOffline","function_name","proveExecution","executeFunctionOffline","recordOne","recordTwo","joinProvingKey","joinVerifyingKey","RecordPlaintext","buildJoinTransaction","splitAmount","amountRecord","splitProvingKey","splitVerifyingKey","buildSplitTransaction","transfer","amount","recipient","transferType","VALID_TRANSFER_TYPES","validateTransferType","transferProvingKey","transferVerifyingKey","PRIVATE_TRANSFER_TYPES","requiresAmountRecord","buildTransferTransaction","createProgramFromSource","creditsProgram","getCreditsProgram","verifyProgram","singletonWorker","createAleoWorker","wrap","initializeWasm","init","Set","proxyMarker","Symbol","createEndpoint","releaseProxy","finalizer","throwMarker","isObject","val","transferHandlers","canHandle","serialize","obj","port1","port2","MessageChannel","expose","deserialize","port","serialized","isError","name","stack","Object","assign","ep","globalThis","allowedOrigins","callback","ev","origin","allowedOrigin","RegExp","test","isAllowedOrigin","path","argumentList","fromWireValue","returnValue","parent","slice","reduce","prop","rawValue","apply","proxy","transfers","transferCache","catch","wireValue","transferables","toWireValue","closeEndPoint","TypeError","endpoint","isMessagePort","close","createProxy","throwIfProxyReleased","isReleased","releaseEndpoint","requestResponseMessage","proxyCounter","WeakMap","proxyFinalizers","FinalizationRegistry","newCount","isProxyReleased","Proxy","_target","unregister","unregisterProxy","r","p","bind","_thisArg","rawArgumentList","last","processArguments","construct","register","registerProxy","processed","v","arr","prototype","concat","handler","serializedValue","msg","fill","Math","floor","random","Number","MAX_SAFE_INTEGER"],"sourceRoot":""}